training.fit <-  lme4::lmer(ndi1_2 ~ ndi0 + hads0_anx + hads0_depr + time_fct + (1|id),
data = training, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response',
allow.new.levels = T)
loss[k] <- Loss(validation$ndi1_2, validation.predict)
}
validation
for (k in 1:K){
training <- df_pred52[df_pred52$.folds !=k, ]
validation <- df_pred52[df_pred52$.folds ==k, ]
training.fit <-  lme4::lmer(ndi1_2 ~ ndi0 + hads0_anx + hads0_depr + time_fct + (1|id),
data = training, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response',
allow.new.levels = T)
loss[k] <- Loss(validation$ndi1_2, validation.predict)
}
# Show RMSE + SD
loss
RMSE  <- round(mean(loss), digits = 1)
RMSE
round(sd(loss), digits = 1)
df_hist_pred
# Create dataframe
predictions <- round(validation.predict, digits = 0)
# Add new column with folds numbers
K <- 5
df_prediction <- fold(df_prediction, k = K, id_col = "id_revalue") %>%
print(n=Inf)
# Create Loss function: Root Mean Squard Error
Loss <- function(x, y){
mse <- sum((x-y)^2)/length(x)
rmse <- sqrt(mse)
return(rmse)
}
loss <- numeric(K)
for (k in 1:K){
training <- df_prediction[df_prediction$.folds !=k, ]
validation <- df_prediction[df_prediction$.folds ==k, ]
training.fit <-  lme4::lmer(ndi1_2 ~ ndi0 + hads0_anx + hads0_depr + time_fct + (1|id),
data = training, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response',
allow.new.levels = T)
loss[k] <- Loss(validation$ndi1_2, validation.predict)
}
# Show RMSE + SD
loss
RMSE  <- round(mean(loss), digits = 1)
RMSE
round(sd(loss), digits = 1)
# Create dataframe
predictions <- round(validation.predict, digits = 0)
validations <- validation$ndi1_2
subject <- validation$id
timepoint <- validation$time_fct
id_time <- paste(subject, timepoint, sep = "-")
df_hist_pred1 <- data.frame(id_time = id_time, id = subject, time = timepoint,
value = predictions, var = "predictions")
df_hist_pred2 <- data.frame(id_time = id_time, id = subject, time = timepoint,
value = validations, var = "validations")
df_hist_pred <- rbind(df_hist_pred1, df_hist_pred2)
df_hist_pred <- df_hist_pred[order(df_hist_pred$time),]
# Plot predictions and validation together
p_bar <- ggplot(data=df_hist_pred, aes(x=id_time, y=value)) +
geom_bar(stat="identity", position=position_dodge(), aes(fill = var, colour = var))+
#geom_text(aes(label=value), vjust=1.6, color="white",
#         position = position_dodge(3), size=3.5)+
ylab("NDI") + xlab("ID & visit") +
theme +
scale_color_manual(values = c('validations' = '#333333', 'predictions' = 'red')) +
scale_fill_manual(values = c('validations' = '#333333', 'predictions' = 'red')) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) #+ facet_grid(~time)
plot(p_bar)
df_hist_pred
View(df_hist_pred)
predictions_not_rounded <- validation.predict
df_hist_pred1 <- data.frame(id_time = id_time, id = subject, time = timepoint,
value = predictions,  pred_not_rounded = predictions_not_rounded,
var = "predictions")
df_hist_pred2 <- data.frame(id_time = id_time, id = subject, time = timepoint,
value = validations, pred_not_rounded = predictions_not_rounded,
var = "validations")
df_hist_pred <- rbind(df_hist_pred1, df_hist_pred2)
df_hist_pred <- df_hist_pred[order(df_hist_pred$time),]
View(df_hist_pred)
data.frame(id = subject, time = timepoint, pred = predictions_not_rounded, val = validations)
df_cv <- data.frame(id = subject, time = timepoint, pred = predictions_not_rounded, val = validations)
df_cv %>%
filter(time == 52)
df_cv %>%
filter(time == 52) %>%
summary(rmse = Loss(val, pred))
df_cv52 <- df_cv %>%
filter(time == 52)
Loss(df_cv52$pred, df_cv52$val)
df_cv104 <- df_cv %>%
filter(time == 104)
Loss(df_cv104$pred, df_cv104$val)
loss <- numeric(K)
list_pred <- ls()
for (k in 1:K){
training <- df_prediction[df_prediction$.folds !=k, ]
validation <- df_prediction[df_prediction$.folds ==k, ]
training.fit <-  lme4::lmer(ndi1_2 ~ ndi0 + hads0_anx + hads0_depr + time_fct + (1|id),
data = training, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response',
allow.new.levels = T)
loss[k] <- Loss(validation$ndi1_2, validation.predict)
# Save predictions in list
list_pred[[k]] <- validation.predict
}
list_pred <- ls()
list_pred
validation.predict
# Save predictions in list
list_pred[[k]] <- validation.predict
list_pred <- c()
for (k in 1:K){
training <- df_prediction[df_prediction$.folds !=k, ]
validation <- df_prediction[df_prediction$.folds ==k, ]
training.fit <-  lme4::lmer(ndi1_2 ~ ndi0 + hads0_anx + hads0_depr + time_fct + (1|id),
data = training, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response',
allow.new.levels = T)
loss[k] <- Loss(validation$ndi1_2, validation.predict)
# Save predictions in list
list_pred[[k]] <- validation.predict
}
list_pred
# Show RMSE + SD
loss
RMSE  <- round(mean(loss), digits = 1)
RMSE
round(sd(loss), digits = 1)
View(list_pred)
View(list_pred)
validation
# Save predictions in list
list_pred[[k]] <- validation %>%
select(id_revalue, id, ndi1_2, time_fct, pred = validation.predict)
# Save predictions in list
list_pred[[k]] <- validation %>%
select(id_revalue, id, ndi1_2, time_fct) %>%
mutate(pred = validation.predict)
validation %>%
select(id_revalue, id, ndi1_2, time_fct)
# Save predictions in list
list_pred[[k]] <- validation %>%
dplyr::select(id_revalue, id, ndi1_2, time_fct) %>%
mutate(pred = validation.predict)
# Save predictions in list
list_pred[[k]] <- validation %>%
dplyr::select(id_revalue, id, ndi1_2, time_fct, .folds) %>%
mutate(pred = validation.predict)
list_pred
loss <- numeric(K)
list_pred <- c()
for (k in 1:K){
training <- df_prediction[df_prediction$.folds !=k, ]
validation <- df_prediction[df_prediction$.folds ==k, ]
training.fit <-  lme4::lmer(ndi1_2 ~ ndi0 + hads0_anx + hads0_depr + time_fct + (1|id),
data = training, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response',
allow.new.levels = T)
loss[k] <- Loss(validation$ndi1_2, validation.predict)
# Save predictions in list
list_pred[[k]] <- validation %>%
dplyr::select(id_revalue, id, ndi1_2, time_fct, .folds) %>%
mutate(pred = validation.predict)
}
# Show RMSE + SD
loss
list_pred
do.call("rbind", list_pred)
df_cv <- do.call("rbind", list_pred)
df_cv52 <- df_cv %>%
filter(time == 52)
Loss(df_cv52$pred, df_cv52$val)
df_cv52 <- df_cv %>%
filter(time_fct == 52)
Loss(df_cv52$pred, df_cv52$val)
Loss(df_cv52$pred, df_cv52$ndi1_2)
df_cv104 <- df_cv %>%
filter(time_fct == 104)
Loss(df_cv104$pred, df_cv104$ndi1_2)
"C:\Program Files\Pandoc"
# The directory where Pandoc will be extracted. Feel free
# to adjust this path as appropriate.
dir <- "C:/Program Files/Pandoc"
local({
# The directory where Pandoc will be extracted. Feel free
# to adjust this path as appropriate.
dir <- "C:/Program Files/Pandoc"
# The version of Pandoc to be installed.
version <- "2.7.1"
# Create and move to the requested directory.
dir.create(dir, showWarnings = FALSE, recursive = TRUE)
owd <- setwd(dir)
on.exit(setwd(owd), add = TRUE)
# Construct path to pandoc.
root <- "https://s3.amazonaws.com/rstudio-buildtools"
suffix <- sprintf("pandoc-%s-windows-x86_64.zip", version)
url <- file.path(root, "pandoc-rstudio", version, suffix)
# Download and extract pandoc.
file <- basename(url)
utils::download.file(url, destfile = file)
utils::unzip(file)
unlink(file)
# Write .Renviron to update the version of Pandoc used.
entry <- paste("RSTUDIO_PANDOC", shQuote(path.expand(dir)), sep = " = ")
contents <- if (file.exists("~/.Renviron")) readLines("~/.Renviron")
filtered <- grep("^RSTUDIO_PANDOC", contents, value = TRUE, invert = TRUE)
amended <- union(filtered, entry)
writeLines(amended, "~/.Renviron")
# Report change to the user.
writeLines("Updated .Renviron:\n")
writeLines(amended)
writeLines("\nPlease restart RStudio for these changes to take effect.")
})
local({
# The directory where Pandoc will be extracted. Feel free
# to adjust this path as appropriate.
dir <- "C:/Program Files/Pandoc"
# The version of Pandoc to be installed.
version <- "2.8.1"
# Create and move to the requested directory.
dir.create(dir, showWarnings = FALSE, recursive = TRUE)
owd <- setwd(dir)
on.exit(setwd(owd), add = TRUE)
# Construct path to pandoc.
root <- "https://s3.amazonaws.com/rstudio-buildtools"
suffix <- sprintf("pandoc-%s-windows-x86_64.zip", version)
url <- file.path(root, "pandoc-rstudio", version, suffix)
# Download and extract pandoc.
file <- basename(url)
utils::download.file(url, destfile = file)
utils::unzip(file)
unlink(file)
# Write .Renviron to update the version of Pandoc used.
entry <- paste("RSTUDIO_PANDOC", shQuote(path.expand(dir)), sep = " = ")
contents <- if (file.exists("~/.Renviron")) readLines("~/.Renviron")
filtered <- grep("^RSTUDIO_PANDOC", contents, value = TRUE, invert = TRUE)
amended <- union(filtered, entry)
writeLines(amended, "~/.Renviron")
# Report change to the user.
writeLines("Updated .Renviron:\n")
writeLines(amended)
writeLines("\nPlease restart RStudio for these changes to take effect.")
})
rm(list = ls())
library(haven)
library(tidyverse)
library(gridExtra)
library(xtable)
data <- read_sav("Data/Dataset NECK HADS stuk 12-08-2019 long.sav")
data_missing <- data %>%
select(PATIENTID, PMOMENTX, NDI.Som.GOED, HADSDEPR, HADSANGS) %>%
filter_all(any_vars(is.na(.))) %>%
print(n = Inf)
data_missing <- data %>%
select(PATIENTID, PMOMENTX, NDI.Som.GOED, HADSDEPR, HADSANGS) %>%
filter_all(any_vars(is.na(.))) %>%
count(.)
data_missing
data_missing <- data %>%
select(PATIENTID, PMOMENTX, NDI.Som.GOED, HADSDEPR, HADSANGS) %>%
filter_all(any_vars(is.na(.))) %>%
count(PATIENTID)
data %>%
select(PATIENTID, PMOMENTX, NDI.Som.GOED, HADSDEPR, HADSANGS) %>%
filter_all(any_vars(is.na(.))) %>%
count(PATIENTID)
data %>%
select(PATIENTID, PMOMENTX, NDI.Som.GOED, HADSDEPR, HADSANGS) %>%
filter_all(any_vars(is.na(.))) %>%
count(PATIENTID) %>%
print(n = Inf)
data %>%
select(PATIENTID, PMOMENTX, NDI.Som.GOED, HADSDEPR, HADSANGS) %>%
filter_all(any_vars(is.na(.))) %>%
count(NDI.som.Goed) %>%
print(n = Inf)
data %>%
select(PATIENTID, PMOMENTX, NDI.Som.GOED, HADSDEPR, HADSANGS) %>%
filter_all(any_vars(is.na(.))) %>%
count(NDI.som.GOED) %>%
print(n = Inf)
data %>%
select(PATIENTID, PMOMENTX, NDI.Som.GOED, HADSDEPR, HADSANGS) %>%
filter_all(any_vars(is.na(.))) %>%
count(NDI.Som.GOED) %>%
print(n = Inf)
109*2 - 28
rm(list = ls())
library(tidyverse)
library(gridExtra)
df_long <- read.csv("Data/data_final_2019-11-05.csv", sep = ",")
df_long$time_fct <- as.factor(df_long$time_fct)
str(df_long)
# Set layout for all figures
theme <- theme(panel.background = element_blank(),
panel.grid.major = element_line(colour = "darkgrey", size=0.5),
panel.grid.minor = element_line(colour = "grey",
size=.25,
linetype = "dashed"),
panel.border = element_blank(),
axis.line.x = element_line(colour = "black",
size=0.5,
lineend = "butt"),
axis.line.y = element_line(colour = "black",
size=0.5),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
p_demo <- df_long %>%
dplyr::select(ndi, hads_tot) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(bins = 30) + theme +
ggtitle("Histograms")
plot(p_demo)
png("Figures/Histograms.png",width = 15, height = 7, units='in',res=300)
plot(p_demo)
dev.off()
rm(list = ls())
library(haven)
library(tidyverse)
library(gridExtra)
library(xtable)
data <- read_sav("Data/Dataset NECK HADS stuk 12-08-2019 long.sav")
data_missing <- data %>%
select(PATIENTID, PMOMENTX, NDI.Som.GOED, HADSDEPR, HADSANGS) %>%
filter_all(any_vars(is.na(.))) %>%
print(n = Inf)
data %>%
select(PATIENTID, PMOMENTX, NDI.Som.GOED, HADSDEPR, HADSANGS) %>%
filter_all(any_vars(is.na(.))) %>%
count(NDI.Som.GOED) %>%
print(n = Inf)
#### Cleaning data ####
df_all <- data %>%
dplyr::select(PATIENTID, OPERATIE, PMOMENTX, NDI.Som.GOED, HADSDEPR, HADSANGS) %>%
rename(id = PATIENTID, surgery = OPERATIE, time = PMOMENTX, ndi = NDI.Som.GOED,
hads_depr = HADSDEPR, hads_anx = HADSANGS)
# remove nas
df_long <- df_all %>%
drop_na(ndi, hads_anx, hads_depr) %>%
mutate(time_fct = as.factor(time), hads_tot = hads_depr + hads_anx)
# Create new dataframe with HADS at time = 0 & NDI at time = 0
df_time0 <- df_long[df_long$time == 0, ]
df_time0 <- dplyr::select(df_time0, id, ndi, hads_tot, hads_anx, hads_depr)
colnames(df_time0) <-  c("id", "ndi0", "hads0_tot", "hads0_anx", "hads0_depr")
# Create new dataframe with HADS and NDI at 52 and 104 weeks
df_time1_2 <- df_long[df_long$time != 0, ]
df_time1_2 <- dplyr::select(df_time1_2, id, ndi, time_fct)
colnames(df_time1_2) <-  c("id", "ndi1_2", "time_fct")
# Merge dataframes
df_prediction <- merge(df_time1_2, df_time0, by = "id")
106 + 193
# Merge dataframes
df_prediction <- full_join(df_time1_2, df_time0, by = "id")
# Merge dataframes
df_prediction <- merge(df_time1_2, df_time0, by = "id")
full_join
# Merge dataframes
df_prediction <- full_join(df_time1_2, df_time0, by = "id")
View(df_prediction)
# Join dataframes
df_prediction <- full_join(df_time1_2, df_time0, by = "id") %>%
mutate(id = as.factor(id))
109*2
109*2 - 28
View(df_prediction)
# Join dataframes
df_prediction <- full_join(df_time1_2, df_time0, by = "id") %>%
mutate(id = as.factor(id)) %>%
filter_all(any_vars(is.na(.))) %>%
print(n = Inf)
299-12
df_all %>%
filter_all(any_vars(is.na(.)))
df_all %>%
filter_all(any_vars(is.na(.))) %>%
print(n = Inf)
# remove nas
df_long <- df_all %>%
drop_na(ndi, hads_anx, hads_depr) %>%
mutate(time_fct = as.factor(time), hads_tot = hads_depr + hads_anx)
# Create new dataframe with HADS at time = 0 & NDI at time = 0
df_time0 <- df_long[df_long$time == 0, ]
df_time0 <- dplyr::select(df_time0, id, ndi, hads_tot, hads_anx, hads_depr)
colnames(df_time0) <-  c("id", "ndi0", "hads0_tot", "hads0_anx", "hads0_depr")
# Create new dataframe with HADS and NDI at 52 and 104 weeks
df_time1_2 <- df_long[df_long$time != 0, ]
df_time1_2 <- dplyr::select(df_time1_2, id, ndi, time_fct)
colnames(df_time1_2) <-  c("id", "ndi1_2", "time_fct")
setdiff(df_time0$id, df_time1_2$id)
setdiff(df_time1_2$id, df_time0$id)
# Join dataframes
df_prediction <- full_join(df_time1_2, df_time0, by = "id") %>%
mutate(id = as.factor(id)) %>%
filter_all(any_vars(is.na(.))) %>%
print(n = Inf)
setdiff(df_time0$id, df_time1_2$id)
106 + 193
setdiff(df_time1_2$id, df_time0$id)
# Join dataframes
df_prediction <- full_join(df_time1_2, df_time0, by = "id") %>%
mutate(id = as.factor(id)) #%>%
df_prediction
View(df_prediction)
str(df_prediction)
View(df_prediction)
# Join dataframes
df_prediction <- left_join(df_time1_2, df_time0, by = "id") %>%
mutate(id = as.factor(id)) #%>%
# Join dataframes
df_prediction <- left_join(df_time1_2, df_time0, by = "id") %>%
mutate(id = as.factor(id)) %>%
filter_all(any_vars(is.na(.))) %>%
print(n = Inf)
# Join dataframes
df_prediction <- left_join(df_time1_2, df_time0, by = "id") %>%
mutate(id = as.factor(id))# %>%
# Join dataframes
df_prediction <- right_join(df_time1_2, df_time0, by = "id") %>%
mutate(id = as.factor(id))
# Join dataframes
df_prediction <- right_join(df_time1_2, df_time0, by = "id") %>%
mutate(id = as.factor(id))
View(df_prediction)
write.table(df_prediction, file = "Data/data_final_prediction_2019-11-05.csv", sep = ",",
row.names = FALSE, na = "", col.names = T)
# Join dataframes -> we need patients with at least a baseline measurement
df_prediction <- right_join(df_time1_2, df_time0, by = "id") %>%
mutate(id = as.factor(id))
write.table(df_prediction, file = "Data/data_final_prediction_2019-11-05.csv", sep = ",",
row.names = FALSE, na = "", col.names = T)
# Load libraries
rm(list = ls())
set.seed(19950306)
library(ggplot2)
library(lme4)
library(tidyverse)
library(nlme)
library(emmeans)
library(car)
library(lattice)
library(merTools)
library(xtable)
library(caret)
library(groupdata2)
# Set layout for all figures
theme <- theme(panel.background = element_blank(),
panel.grid.major = element_line(colour = "darkgrey", size=0.5),
panel.grid.minor = element_line(colour = "grey",
size=.25,
linetype = "dashed"),
panel.border = element_blank(),
axis.line.x = element_line(colour = "black",
size=0.5,
lineend = "butt"),
axis.line.y = element_line(colour = "black",
size=0.5),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
df_prediction <- read.csv("Data/data_final_prediction_2019-11-05.csv", sep = ",")
# Center predictors -> makes interpretation intercept easier
# Create new numbering voor de IDs -> for Cross validation
df_prediction <- df_prediction %>%
mutate(id_revalue = as.factor(group_indices(.,.dots=list("id")))) %>%
mutate(time_fct = as.factor(time_fct)) %>%
mutate(ndi0_cnt =  ndi0 - mean(ndi0)) %>%
mutate(hads0_tot_cnt = hads0_tot - mean(hads0_tot))
# Center predictors -> makes interpretation intercept easier
# Create new numbering voor de IDs -> for Cross validation
df_prediction <- df_prediction %>%
mutate(id_revalue = as.factor(group_indices_(.,.dots=list("id")))) %>%
mutate(time_fct = as.factor(time_fct)) %>%
mutate(ndi0_cnt =  ndi0 - mean(ndi0)) %>%
mutate(hads0_tot_cnt = hads0_tot - mean(hads0_tot))
str(df_prediction)
View(df_prediction)
rm(list = ls())
library(haven)
library(tidyverse)
library(gridExtra)
library(xtable)
data <- read_sav("Data/Dataset NECK HADS stuk 12-08-2019 long.sav")
data_missing <- data %>%
select(PATIENTID, PMOMENTX, NDI.Som.GOED, HADSDEPR, HADSANGS) %>%
filter_all(any_vars(is.na(.))) %>%
print(n = Inf)
data %>%
select(PATIENTID, PMOMENTX, NDI.Som.GOED, HADSDEPR, HADSANGS) %>%
filter_all(any_vars(is.na(.))) %>%
count(NDI.Som.GOED) %>%
print(n = Inf)
data %>%
dplyr::select(PATIENTID, PMOMENTX, NDI.Som.GOED, HADSDEPR, HADSANGS) %>%
filter_all(any_vars(is.na(.))) %>%
count(NDI.Som.GOED) %>%
print(n = Inf)
data_missing <- data %>%
dplyr::select(PATIENTID, PMOMENTX, NDI.Som.GOED, HADSDEPR, HADSANGS) %>%
filter_all(any_vars(is.na(.))) %>%
print(n = Inf)
