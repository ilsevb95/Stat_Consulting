geom_point(aes(x=time, y = ndi, col = id), size = 4, alpha = 0.3, data = df_long) +
geom_line(aes(x=time, y =ndi, group = id, col = id), alpha = 0.3, size = 1, data = df_long) +
theme(legend.position = "none") +
geom_line( col = "blue", size = 2) +
geom_point(col = "blue", size = 4) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) +
ylab("NDI")  + ylim(c(0,100)) +
xlab("Time (weeks)") + theme
plot(p4)
# Plot marginal + raw data
p4 <- ggplot(data = df_emmeans, aes(x = time, y = prediction )) +
geom_point(aes(x=time, y = ndi, col = id), size = 4, alpha = 0.3, data = df_long) +
geom_line(aes(x=time, y =ndi, group = id, col = id), alpha = 0.3, size = 1, data = df_long) +
theme(legend.position = "none") +
geom_line( col = "blue", size = 2) +
geom_point(col = "blue", size = 4) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.7) +
ylab("NDI")  + ylim(c(0,100)) +
xlab("Time (weeks)") + theme
plot(p4)
# Plot marginal + raw data
p4 <- ggplot(data = df_emmeans, aes(x = time, y = prediction )) +
geom_point(aes(x=time, y = ndi, col = id), size = 4, alpha = 0.3, data = df_long) +
geom_line(aes(x=time, y =ndi, group = id, col = id), alpha = 0.3, size = 1, data = df_long) +
theme(legend.position = "none") +
geom_line( col = "blue", size = 2) +
geom_point(col = "blue", size = 4) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.9) +
ylab("NDI")  + ylim(c(0,100)) +
xlab("Time (weeks)") + theme
plot(p4)
# Plot marginal + raw data
p4 <- ggplot(data = df_emmeans, aes(x = time, y = prediction )) +
geom_point(aes(x=time, y = ndi, col = id), size = 4, alpha = 0.3, data = df_long) +
geom_line(aes(x=time, y =ndi, group = id, col = id), alpha = 0.3, size = 1, data = df_long) +
theme(legend.position = "none") +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.9) +
geom_line( col = "blue", size = 2) +
geom_point(col = "blue", size = 4) +
ylab("NDI")  + ylim(c(0,100)) +
xlab("Time (weeks)") + theme
plot(p4)
# Plot marginal + raw data
p4 <- ggplot(data = df_emmeans, aes(x = time, y = prediction )) +
geom_point(aes(x=time, y = ndi, col = id), size = 4, alpha = 0.3, data = df_long) +
geom_line(aes(x=time, y =ndi, group = id, col = id), alpha = 0.3, size = 1, data = df_long) +
theme(legend.position = "none") +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.7) +
geom_line( col = "blue", size = 2) +
geom_point(col = "blue", size = 4) +
ylab("NDI")  + ylim(c(0,100)) +
xlab("Time (weeks)") + theme
plot(p4)
# Plot marginal + raw data
p4 <- ggplot(data = df_emmeans, aes(x = time, y = prediction )) +
geom_point(aes(x=time, y = ndi, col = id), size = 4, alpha = 0.3, data = df_long) +
geom_line(aes(x=time, y =ndi, group = id, col = id), alpha = 0.3, size = 1, data = df_long) +
theme(legend.position = "none") +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.7) +
geom_line( col = "blue", size = 3) +
geom_point(col = "blue", size = 5) +
ylab("NDI")  + ylim(c(0,100)) +
xlab("Time (weeks)") + theme
plot(p4)
# Plot only marginal mean
p3 <- ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() +
geom_line(col = "blue", size = 2) +
geom_point(col = "blue", size = 4) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) +
theme(legend.position = "none") +
ylab("NDI")  + ylim(c(0,100)) +
xlab("Time (weeks)") + theme
plot(p3)
# Plot only marginal mean
p3 <- ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() +
geom_line(col = "blue", size = 2) +
geom_point(col = "blue", size = 4) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) +
theme(legend.position = "none") +
ylab("NDI")  + ylim(c(0,40)) +
xlab("Time (weeks)") + theme
plot(p3)
# Plot only marginal mean
p3 <- ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() +
geom_line(col = "blue", size = 2) +
geom_point(col = "blue", size = 4) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) +
theme(legend.position = "none") +
ylab("NDI")  + ylim(c(0,50)) +
xlab("Time (weeks)") + theme
plot(p3)
# Plot marginal + raw data
p4 <- ggplot(data = df_emmeans, aes(x = time, y = prediction )) +
geom_point(aes(x=time, y = ndi, col = id), size = 4, alpha = 0.3, data = df_long) +
geom_line(aes(x=time, y =ndi, group = id, col = id), alpha = 0.3, size = 1, data = df_long) +
theme(legend.position = "none") +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.7) +
geom_line( col = "blue", size = 3) +
geom_point(col = "blue", size = 5) +
ylab("NDI")  + ylim(c(0,100)) +
xlab("Time (weeks)") + theme
plot(p4)
png("Figures/Marginal_NDI.png",width = 15, height = 7, units='in',res=300)
plot(p3)
dev.off()
png("Figures/Marginal&Raw_NDI.png",width = 15, height = 7, units='in',res=300)
plot(p4)
dev.off()
#model_final <- nlme::lme(ndi ~ time + hads_tot, random = ~1|id, method= "REML", data = df_long)
model_final <- nlme::lme(ndi ~ time_fct + hads_tot, method = "REML",
random = ~1|id, data = df_long)
summary(model_final)
final_mod_summ <- coef(summary(model_final))
xtable(final_mod_summ)
#model_final <- nlme::lme(ndi ~ time + hads_tot, random = ~1|id, method= "REML", data = df_long)
df_long$hads_tot_cnt <- df_long$hads_tot - mean(df_long$hads_tot)
model_final <- nlme::lme(ndi ~ time_fct + hads_tot_cnt, method = "REML",
random = ~1|id, data = df_long)
summary(model_final)
final_mod_summ <- coef(summary(model_final))
xtable(final_mod_summ)
# Load libraries
rm(list = ls())
set.seed(19950306)
library(ggplot2)
library(lme4)
library(tidyverse)
library(nlme)
library(emmeans)
library(car)
library(lattice)
library(merTools)
library(xtable)
# Set layout for all figures
theme <- theme(panel.background = element_blank(),
panel.grid.major = element_line(colour = "darkgrey", size=0.5),
panel.grid.minor = element_line(colour = "grey",
size=.25,
linetype = "dashed"),
panel.border = element_blank(),
axis.line.x = element_line(colour = "black",
size=0.5,
lineend = "butt"),
axis.line.y = element_line(colour = "black",
size=0.5),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
df_prediction <- read.csv("Data/data_final_prediction_2019-11-05.csv", sep = ",")
df_prediction$time_fct <- as.factor(df_prediction$time_fct)
str(df_prediction)
# Center predictors
df_prediction$ndi0_cnt <- df_prediction$ndi0 - mean(df_prediction$ndi0)
df_prediction$hads0_tot_cnt <- df_prediction$hads0_tot - mean(df_prediction$hads0_tot)
model_icc <- nlme::lme(ndi1_2 ~ 1, method = "REML",
random = ~1|id, data = df_prediction)
summary(model_icc)
# Calculate ICC (amount of var explained = 65 %
15.56856^2 / (15.56856^2 + 8.937615^2)
# Load ggCaterpillar, used to plot the random intercept
set.seed(19950306)
rm(list = ls())
library(ggplot2)
library(lme4)
library(tidyverse)
# Load ggCaterpillar, used to plot the random intercept
rm(list = ls())
set.seed(19950306)
library(ggplot2)
library(lme4)
library(tidyverse)
library(nlme)
library(emmeans)
library(car)
library(lattice)
library(xtable)
library(gridExtra)
ggCaterpillar <- function(re, QQ=TRUE, likeDotplot=TRUE) {
require(ggplot2)
f <- function(x) {
pv   <- attr(x, "postVar")
cols <- 1:(dim(pv)[1])
se   <- unlist(lapply(cols, function(i) sqrt(pv[i, i, ])))
ord  <- unlist(lapply(x, order)) + rep((0:(ncol(x) - 1)) * nrow(x), each=nrow(x))
pDf  <- data.frame(y=unlist(x)[ord],
ci=1.96*se[ord],
nQQ=rep(qnorm(ppoints(nrow(x))), ncol(x)),
ID=factor(rep(rownames(x), ncol(x))[ord], levels=rownames(x)[ord]),
ind=gl(ncol(x), nrow(x), labels=names(x)))
if(QQ) {  ## normal QQ-plot
p <- ggplot(pDf, aes(nQQ, y))
p <- p + facet_wrap(~ ind, scales="free")
p <- p + xlab("Standard normal quantiles") + ylab("Random effect quantiles")
} else {  ## caterpillar dotplot
p <- ggplot(pDf, aes(ID, y)) + coord_flip()
if(likeDotplot) {  ## imitate dotplot() -> same scales for random effects
p <- p + facet_wrap(~ ind)
} else {           ## different scales for random effects
p <- p + facet_grid(ind ~ ., scales="free_y")
}
p <- p + xlab("Levels") + ylab("Random effects")
}
p <- p + theme(legend.position="none")
p <- p + geom_hline(yintercept=0)
p <- p + geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=0, colour="black")
p <- p + geom_point(aes(size=1.2), colour="blue")
return(p)
}
lapply(re, f)
}
# Set layout for all figures
theme <- theme(panel.background = element_blank(),
panel.grid.major = element_line(colour = "darkgrey", size=0.5),
panel.grid.minor = element_line(colour = "grey",
size=.25,
linetype = "dashed"),
panel.border = element_blank(),
axis.line.x = element_line(colour = "black",
size=0.5,
lineend = "butt"),
axis.line.y = element_line(colour = "black",
size=0.5),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
df_long <- read.csv("Data/data_final_2019-11-05.csv", sep = ",")
df_long$time_fct <- as.factor(df_long$time_fct)
str(df_long)
model_icc <- nlme::lme(ndi ~ 1, method = "REML",
random = ~1|id, data = df_long)
summary(model_icc)
10.1481^2 / ( 10.1481^2 + 18.21792^2)
rr1 <- ranef(model_final,  condVar = T)
model_final <- nlme::lme(ndi ~ time_fct + hads_tot_cnt, method = "REML",
random = ~1|id, data = df_long)
# Create time factor & center HADS at its mean
df_long$time_fct <- as.factor(df_long$time_fct)
df_long$hads_tot_cnt <- df_long$hads_tot - mean(df_long$hads_tot)
str(df_long)
model_final <- nlme::lme(ndi ~ time_fct + hads_tot_cnt, method = "REML",
random = ~1|id, data = df_long)
summary(model_final)
# Calculate the intra class correlation:
# Model explains only 47 % of variance
random_effects <- VarCorr(model_final)
print(random_effects,comp=c("Variance"))
83 / (93 + 83)
# Calculate the intra class correlation:
# Model explains only 47 % of variance
random_effects <- VarCorr(model_icc)
print(random_effects,comp=c("Variance"))
model_icc <- nlme::lme(ndi ~ 1, method = "REML",
random = ~1|id, data = df_long)
summary(model_icc)
# Calculate the intra class correlation:
# Model explains only 24 % of variance
random_effects <- VarCorr(model_icc)
print(random_effects,comp=c("Variance"))
102.9839 / ( 102.9839 + 331.8927)
rr1 <- ranef(model_final,  condVar = T)
ggCaterpillar(rr1, QQ = F, likeDotplot = T)
rr1
hist(rr1)
# Load libraries
rm(list = ls())
set.seed(19950306)
library(ggplot2)
library(lme4)
library(tidyverse)
library(nlme)
library(emmeans)
library(car)
library(lattice)
library(merTools)
library(xtable)
# Set layout for all figures
theme <- theme(panel.background = element_blank(),
panel.grid.major = element_line(colour = "darkgrey", size=0.5),
panel.grid.minor = element_line(colour = "grey",
size=.25,
linetype = "dashed"),
panel.border = element_blank(),
axis.line.x = element_line(colour = "black",
size=0.5,
lineend = "butt"),
axis.line.y = element_line(colour = "black",
size=0.5),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
df_prediction <- read.csv("Data/data_final_prediction_2019-11-05.csv", sep = ",")
df_prediction$time_fct <- as.factor(df_prediction$time_fct)
str(df_prediction)
# Center predictors -> makes interpretation intercept easier
df_prediction$ndi0_cnt <- df_prediction$ndi0 - mean(df_prediction$ndi0)
df_prediction$hads0_tot_cnt <- df_prediction$hads0_tot - mean(df_prediction$hads0_tot)
str(df_prediction)
model_final <- nlme::lme(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + time_fct, method = "REML",
random = ~1|id, data = df_prediction)
# Create folds
K <- 5
index <- rep(1:K, floor(nrow(df_prediction)/K)+1)[1:nrow(df_prediction)]
fold.index <- sample(index)
# Create Loss function: Root Mean Squard Error
Loss <- function(x, y){
mse <- sum((x-y)^2)/length(x)
rmse <- sqrt(mse)
return(rmse)
}
loss <- numeric(K)
for (k in 1:K){
training <- df_prediction[fold.index!=k, ]
validation <- df_prediction[fold.index==k, ]
training.fit <-  lme4::lmer(ndi1_2 ~ ndi0 + hads0_anx + hads0_depr + time_fct + (1|id),
data = training, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response',
allow.new.levels = T)
loss[k] <- Loss(validation$ndi1_2, validation.predict)
}
loss
round(sd(loss), digits = 1)
RMSE_se <- sd(loss) / sqrt(K)
RMSE_se
RMSE  <- round(mean(loss), digits = 1)
RMSE
lower <- RMSE - 1.96 * RMSE_se
upper  <- RMSE + 1.96 * RMSE_se
c(lower, upper)
# 95 % CI of RMSE
RMSE_se <- sd(loss) / sqrt(K)
lower <- mean(loss) - 1.96 * RMSE_se
upper  <- mean(loss) + 1.96 * RMSE_se
c(lower, upper)
lower <- round(mean(loss) - 1.96 * RMSE_se, digits = 1)
upper  <- round(mean(loss) + 1.96 * RMSE_se, digits = 1)
c(lower, upper)
validation.predict
validation
validation$ndi1_2
validation.predict
round(validation.predict, digits = 0)
validation$ndi1_2
hist(round(validation.predict, digits = 0))
predictions <- round(validation.predict, digits = 0)
predictions
predictions <- round(validation.predict, digits = 0)
validations <- validation$ndi1_2
df_hist_pred <- data.frame(predictions, validations)
df_hist_pred
ggplot(data = df_hist_pred) + geom_histogram(aes( x = predictions))
ggplot(data = df_hist_pred) + geom_histogram(aes( x = predictions), col = "blue", alpha = 0.5)
ggplot(data = df_hist_pred) + geom_histogram(aes( x = predictions), col = "blue",
fill = "blue", alpha = 0.5)
ggplot(data = df_hist_pred) + geom_histogram(aes( x = predictions), col = "blue",
fill = "blue", alpha = 0.5) +
geom_histogram(aes(x = validation), col = "red", fill = "red", alpha = 0.5)
ggplot(data = df_hist_pred) + geom_histogram(aes( x = predictions), col = "blue",
fill = "blue", alpha = 0.5) +
geom_histogram(aes(x = validations), col = "red", fill = "red", alpha = 0.5)
df_hist_pred1 <- data.frame(predictions, var = 1)
df_hist_pred1
df_hist_pred <- cbind(df_hist_pred1, df_hist_pred2)
df_hist_pred1 <- data.frame(predictions, var = "predictions")
df_hist_pred2 <- data.frame(validations, var = "validations")
df_hist_pred <- cbind(df_hist_pred1, df_hist_pred2)
df_hist_pred
df_hist_pred <- rbind(df_hist_pred1, df_hist_pred2)
df_hist_pred1 <- data.frame(value = predictions, var = "predictions")
df_hist_pred2 <- data.frame(value = validations, var = "validations")
df_hist_pred <- rbind(df_hist_pred1, df_hist_pred2)
df_hist_pred
subject
subject <- validation$id
subject
timepoint <- validation$time_fct
timepoint
# Create dataframe
predictions <- round(validation.predict, digits = 0)
validations <- validation$ndi1_2
subject <- validation$id
timepoint <- validation$time_fct
id_time <- paste(subject, timepoint, sep = "-")
id_time
df_hist_pred1 <- data.frame(id_time = id_time, value = predictions, var = "predictions")
df_hist_pred2 <- data.frame(id_time = id_time, value = validations, var = "validations")
df_hist_pred <- rbind(df_hist_pred1, df_hist_pred2)
df_hist_pred
ggplot(data=df_hist_pred, aes(x=id_time, y=value, fill=var)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=len), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5)+
scale_fill_brewer(palette="Paired")
ggplot(data=df_hist_pred, aes(x=id_time, y=value, fill=var)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=value), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5)+
scale_fill_brewer(palette="Paired")
ggplot(data=df_hist_pred, aes(x=id_time, y=value, fill=var)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=value), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5)+
scale_fill_brewer(palette="Paired") + theme
ggplot(data=df_hist_pred, aes(x=id_time, y=value, fill=var)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=value), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5)+
ylab("NDI") + xlab("ID & visit")
ggplot(data=df_hist_pred, aes(x=id_time, y=value, fill=var)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=value), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5)+
ylab("NDI") + xlab("ID & visit") +
scale_fill_brewer(palette="Paired") + theme
ggplot(data=df_hist_pred, aes(x=id_time, y=value, fill=var)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=value), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5)+
ylab("NDI") + xlab("ID & visit") +
scale_fill_brewer(palette="Reds") + theme
ggplot(data=df_hist_pred, aes(x=id_time, y=value, fill=var)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=value), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5)+
ylab("NDI") + xlab("ID & visit") +
scale_fill_brewer(palette="Reds") + theme + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data=df_hist_pred, aes(x=id_time, y=value, fill=var)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=value), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5)+
ylab("NDI") + xlab("ID & visit") +
scale_fill_brewer(palette="Reds") + theme + theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data=df_hist_pred, aes(x=id_time, y=value, fill=var)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=value), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5)+
ylab("NDI") + xlab("ID & visit") +
scale_fill_brewer(palette="Reds") + theme +
theme(axis.text.x = element_text(angle = 45, hjust = 2))
ggplot(data=df_hist_pred, aes(x=id_time, y=value, fill=var)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=value), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5)+
ylab("NDI") + xlab("ID & visit") +
scale_fill_brewer(palette="Reds") + theme +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data=df_hist_pred, aes(x=id_time, y=value, fill=var)) +
geom_bar(stat="identity") + #, position=position_dodge())+
geom_text(aes(label=value), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5)+
ylab("NDI") + xlab("ID & visit") +
scale_fill_brewer(palette="Reds") + theme +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data=df_hist_pred, aes(x=id_time, y=value, fill=var)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=value), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5)+
ylab("NDI") + xlab("ID & visit") +
scale_fill_brewer(palette="Reds") + theme +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df_hist_pred1 <- data.frame(id_time = id_time, id = id, time = timepoint,
value = predictions, var = "predictions")
df_hist_pred2 <- data.frame(id_time = id_time, id = id, time = timepoint,
value = validations, var = "validations")
df_hist_pred1 <- data.frame(id_time = id_time, id = subject, time = timepoint,
value = predictions, var = "predictions")
df_hist_pred2 <- data.frame(id_time = id_time, id = subject, time = timepoint,
value = validations, var = "validations")
df_hist_pred <- rbind(df_hist_pred1, df_hist_pred2)
df_hist_pred
df_hist_pred <- df_hist_pred[order(time)]
df_hist_pred <- df_hist_pred[order(time),]
df_hist_pred[order(time),]
View(df_hist_pred)
ggplot(data=df_hist_pred, aes(x=id_time, y=value, fill=var)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=value), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5)+
ylab("NDI") + xlab("ID & visit") +
scale_fill_brewer(palette="Reds") + theme +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + facet_grid(~time)
df_hist_pred <- df_hist_pred[order(df_hist_pred$time),]
df_hist_pred
ggplot(data=df_hist_pred, aes(x=id_time, y=value, fill=var)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=value), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5)+
ylab("NDI") + xlab("ID & visit") +
scale_fill_brewer(palette="Reds") + theme +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) #+ facet_grid(~time)
df_hist_pred
ggplot(data=df_hist_pred, aes(x=time, y=value, fill=var)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=value), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5)+
ylab("NDI") + xlab("ID & visit") +
scale_fill_brewer(palette="Reds") + theme +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) #+ facet_grid(~time)
ggplot(data=df_hist_pred, aes(x=id_time, y=value, fill=var)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=value), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5)+
ylab("NDI") + xlab("ID & visit") +
scale_fill_brewer(palette="Reds") + theme +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) #+ facet_grid(~time)
RMSE
round(sd(loss), digits = 1)
