pDf  <- data.frame(y=unlist(x)[ord],
ci=1.96*se[ord],
nQQ=rep(qnorm(ppoints(nrow(x))), ncol(x)),
ID=factor(rep(rownames(x), ncol(x))[ord], levels=rownames(x)[ord]),
ind=gl(ncol(x), nrow(x), labels=names(x)))
if(QQ) {  ## normal QQ-plot
p <- ggplot(pDf, aes(nQQ, y))
p <- p + facet_wrap(~ ind, scales="free")
p <- p + xlab("Standard normal quantiles") + ylab("Random effect quantiles")
} else {  ## caterpillar dotplot
p <- ggplot(pDf, aes(ID, y)) + coord_flip()
if(likeDotplot) {  ## imitate dotplot() -> same scales for random effects
p <- p + facet_wrap(~ ind)
} else {           ## different scales for random effects
p <- p + facet_grid(ind ~ ., scales="free_y")
}
p <- p + xlab("Levels") + ylab("Random effects")
}
p <- p + theme(legend.position="none")
p <- p + geom_hline(yintercept=0)
p <- p + geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=0, colour="black")
p <- p + geom_point(aes(size=1.2), colour="blue")
return(p)
}
}
ggCaterpillar(ranef(model_final, condVar=TRUE))
)
rr1 <- ranef(model_final,  condVar = T)
ggCaterpillar(rr1)
ggCaterpillar <- function(re, QQ=TRUE, likeDotplot=TRUE) {
require(ggplot2)
f <- function(x) {
pv   <- attr(x, "postVar")
cols <- 1:(dim(pv)[1])
se   <- unlist(lapply(cols, function(i) sqrt(pv[i, i, ])))
ord  <- unlist(lapply(x, order)) + rep((0:(ncol(x) - 1)) * nrow(x), each=nrow(x))
pDf  <- data.frame(y=unlist(x)[ord],
ci=1.96*se[ord],
nQQ=rep(qnorm(ppoints(nrow(x))), ncol(x)),
ID=factor(rep(rownames(x), ncol(x))[ord], levels=rownames(x)[ord]),
ind=gl(ncol(x), nrow(x), labels=names(x)))
if(QQ) {  ## normal QQ-plot
p <- ggplot(pDf, aes(nQQ, y))
p <- p + facet_wrap(~ ind, scales="free")
p <- p + xlab("Standard normal quantiles") + ylab("Random effect quantiles")
} else {  ## caterpillar dotplot
p <- ggplot(pDf, aes(ID, y)) + coord_flip()
if(likeDotplot) {  ## imitate dotplot() -> same scales for random effects
p <- p + facet_wrap(~ ind)
} else {           ## different scales for random effects
p <- p + facet_grid(ind ~ ., scales="free_y")
}
p <- p + xlab("Levels") + ylab("Random effects")
}
p <- p + theme(legend.position="none")
p <- p + geom_hline(yintercept=0)
p <- p + geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=0, colour="black")
p <- p + geom_point(aes(size=1.2), colour="blue")
return(p)
}
}
ggCaterpillar(rr1)
ggCaterpillar(rr1,  QQ=FALSE, likeDotplot=TRUE)
ggCaterpillar <- function(re, QQ=TRUE, likeDotplot=TRUE) {
require(ggplot2)
f <- function(x) {
pv   <- attr(x, "postVar")
cols <- 1:(dim(pv)[1])
se   <- unlist(lapply(cols, function(i) sqrt(pv[i, i, ])))
ord  <- unlist(lapply(x, order)) + rep((0:(ncol(x) - 1)) * nrow(x), each=nrow(x))
pDf  <- data.frame(y=unlist(x)[ord],
ci=1.96*se[ord],
nQQ=rep(qnorm(ppoints(nrow(x))), ncol(x)),
ID=factor(rep(rownames(x), ncol(x))[ord], levels=rownames(x)[ord]),
ind=gl(ncol(x), nrow(x), labels=names(x)))
if(QQ) {  ## normal QQ-plot
p <- ggplot(pDf, aes(nQQ, y))
p <- p + facet_wrap(~ ind, scales="free")
p <- p + xlab("Standard normal quantiles") + ylab("Random effect quantiles")
} else {  ## caterpillar dotplot
p <- ggplot(pDf, aes(ID, y)) + coord_flip()
if(likeDotplot) {  ## imitate dotplot() -> same scales for random effects
p <- p + facet_wrap(~ ind)
} else {           ## different scales for random effects
p <- p + facet_grid(ind ~ ., scales="free_y")
}
p <- p + xlab("Levels") + ylab("Random effects")
}
p <- p + theme(legend.position="none")
p <- p + geom_hline(yintercept=0)
p <- p + geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=0, colour="black")
p <- p + geom_point(aes(size=1.2), colour="blue")
return(p)
}
lapply(re, f)
}
ggCaterpillar(rr1,  QQ=FALSE, likeDotplot=TRUE)
refgrid <-  ref_grid(model_final)
refgrid
model_final_emm <- lme4::lmer(ndi ~ time_fct + hads_tot + (1|id), REML= T, data = df_long)
model_final_emm <- lme4::lmer(ndi ~ time_fct + hads_tot + (1|id), REML= T, data = df_long)
refgrid <-  ref_grid(model_final_emm)
refgrid
df_emmeans <-  data.frame(summary(refgrid))
df_emmeans
# Compute Estimated Marginal Means over all timepoints for the different Treatments and gender
data_emmeans <-  emmeans(refgrid, specs = c('Treatment', "Gender"))
# Compute Estimated Marginal Means over all timepoints for the different Treatments and gender
data_emmeans <-  emmeans(refgrid, specs = c('Time'))
# Compute Estimated Marginal Means over all timepoints for the different Treatments and gender
data_emmeans <-  emmeans(refgrid, specs = c('time'))
refgrid
# Compute Estimated Marginal Means over all timepoints for the different Treatments and gender
data_emmeans <-  emmeans(refgrid, specs = c('time_fct'))
data_emmeans
df_summ_emmeans <- (summary(data_emmeans))
df_summ_emmeans
# Visualize the covariance matrix
plot_contrast <-  plot(data_emmeans, comparisons = F, alpha = 0.05, intervals = T,
xlab = "Estimated Marginal Means of Systolic Blood Pressure (mmHg)")
# Visualize the covariance matrix
plot_contrast <-  plot(data_emmeans, comparisons = F, alpha = 0.05, intervals = T,
xlab = "Estimated Marginal Means of Systolic Blood Pressure (mmHg)")
plot(data_emmeans, comparisons = F, alpha = 0.05, intervals = T,
xlab = "Estimated Marginal Means of Systolic Blood Pressure (mmHg)")
#model_final <- nlme::lme(ndi ~ time + hads_tot, random = ~1|id, method= "REML", data = df_long)
model_final <- lme4::lmer(ndi ~ time_fct + hads_tot + (1|id), REML= T, data = df_long)
summary(model_final)
model3 <- nlme::lme(ndi ~ time + hads_tot + time:hads_tot, random = ~1|id, method= "ML", data = df_long)
anova(model2, model3)
model4 <- nlme::lme(ndi ~ time + hads_tot + hads_tot:time, random = ~1|id, method= "ML", data = df_long)
anova(model2, model4)
AIC(model1, model2)
anova(model1, model2)
anova(model2, model3)
#model_final <- nlme::lme(ndi ~ time + hads_tot, random = ~1|id, method= "REML", data = df_long)
model_final <- lme4::lmer(ndi ~ time_fct + hads_tot + (1|id), REML= T, data = df_long)
summary(model_final)
VarCorr(model_final)
VarCorr(model_final)[,2]
VarCorr(model_final)$id
VarCorr(model_final)$Std.Dev.
random_effects <- VarCorr(model_final)
random_effects$id
random_effects
random_effects[1,]
random_effects[1]
random_effects[2]
random_effects <- VarCorr(model_final)
random_effects
remat <- summary(model_final)@REmat
print(random_effects,comp=c("Variance"))
print(random_effects,comp=c("Variance"))[1]
print(random_effects,comp=c("Variance"))
var_unexplained <- (model_final$sigma)^2
# Calculate the intra class correlation:
# Model explains only 34 % of variance
83.300 / ( 83.300 +  94.349)
getVarCov(model_final, individual = 1, type = "conditional")
getVarCov(model_final, individual = 1, type = "marginal")
rr1 <- ranef(model_final,  condVar = T)
ggCaterpillar(rr1)
ggCaterpillar(rr1, likeDotplot = T)
ggCaterpillar(rr1, QQ = F, likeDotplot = T)
model_final_emm <- lme4::lmer(ndi ~ time_fct + hads_tot + (1|id), REML= T, data = df_long)
refgrid <-  ref_grid(model_final_emm)
df_emmeans <-  data.frame(summary(refgrid))
refgrid
df_emmeans
# Compute Estimated Marginal Means over all timepoints for the different Treatments and gender
data_emmeans <-  emmeans(refgrid, specs = c('time_fct'))
data_emmeans
df_summ_emmeans <- (summary(data_emmeans))
df_summ_emmeans
df_emmeans <-  data.frame(summary(refgrid))
df_emmeans
data_emmeans
# Compute Estimated Marginal Means over all timepoints for the different Treatments and gender
predictions <-  emmeans(refgrid, specs = c('time_fct'))
predictions
refgrid <-  ref_grid(model_final_emm)
refgrid
df_emmeans
predictions
predictions
df_emmeans
df_emmeans$time <- as.numeric(as.character(df_emmeans$time_fct))
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() + geom_line()
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() + geom_line() +
geom_point(data = df_long, aes(x = time, y = ndi))
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() + geom_line() +
geom_point(data = df_long, aes(x = time, y = ndi, col = id))
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() + geom_line() +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) + theme
theme <-  theme(panel.background = element_rect(fill = "lightgrey", colour = "white", size = 4),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15))
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() + geom_line() +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) + theme
theme <-  theme(panel.background = element_rect(fill = "lightgrey", colour = "white", size = 4),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() + geom_line() +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) + theme
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() + geom_line() +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) + theme + legend.title = element_blank()
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() + geom_line() +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) + theme +
theme(legend.title = element_blank())
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() + geom_line() +
geom_point(data = df_long, aes(x = time, y = ndi, col = id))+
geom_ribbon(data=df_emmeans, aes(ymin=1.96*SE, ymax= 1.96*SE), alpha=0.3) +
theme + theme(legend.title = element_blank())
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() + geom_line() +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) +
geom_ribbon(data=df_emmeans, aes(ymin=1.96*SE, ymax= 1.96*SE), alpha=0.3) +
theme + theme(legend.position = "none")
refgrid <-  ref_grid(model_final_emm)
refgrid
df_emmeans <-  data.frame(summary(refgrid))
df_emmeans$time <- as.numeric(as.character(df_emmeans$time_fct))
df_emmeans$lwr <- df_emmeans$prediction - 1.96*df_emmeans$SE
df_emmeans$upr <- df_emmeans$prediction + 1.96*df_emmeans$SE
# Compute Estimated Marginal Means over all timepoints for the different Treatments and gender
predictions <-  emmeans(refgrid, specs = c('time_fct'))
predictions
41.2 - 1.96 * 1.32
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() + geom_line() +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) +
theme + theme(legend.position = "none")
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() + geom_line() +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3, col = "blue") +
theme + theme(legend.position = "none")
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() + geom_line() +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3, col = "blue", fill = "blue") +
theme + theme(legend.position = "none")
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() + geom_line() +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3, col = "lightblue", fill = "lightblue") +
theme + theme(legend.position = "none")
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() + geom_line() +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3, col = "navyblue", fill = "navyblue") +
theme + theme(legend.position = "none")
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() + geom_line(col = "blue") +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3,
col = "blue", fill = "blue") +
theme + theme(legend.position = "none")
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point(size = 4) + geom_line(col = "blue") +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3,
col = "blue", fill = "blue") +
theme + theme(legend.position = "none")
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point(size = 2) + geom_line(col = "blue") +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3,
col = "blue", fill = "blue") +
theme + theme(legend.position = "none")
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point(size = 2) +
geom_line(col = "blue", size = 2) +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3,
col = "blue", fill = "blue") +
theme + theme(legend.position = "none")
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point(size = 2) +
geom_line(col = "blue", size = 1) +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3,
col = "blue", fill = "blue") +
theme + theme(legend.position = "none")
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point(size = 2) +
geom_line(col = "blue", size = 1) +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3,
col = "grey", fill = "grey") +
theme + theme(legend.position = "none")
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point(size = 2) +
geom_line(col = "blue", size = 1) +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) + #,
#col = "grey", fill = "grey") +
theme(legend.position = "none")
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point(size = 2) +
geom_line(col = "blue", size = 1) +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) + #,
#col = "grey", fill = "grey") +
theme(legend.position = "none") + theme
theme <-  theme(#panel.background = element_rect(fill = "lightgrey", colour = "white", size = 4),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point(size = 2) +
geom_line(col = "blue", size = 1) +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) + #,
#col = "grey", fill = "grey") +
theme(legend.position = "none") + theme
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point(size = 4) +
geom_line(col = "blue", size = 1) +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) + #,
#col = "grey", fill = "grey") +
theme(legend.position = "none") + theme
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point(size = 2) +
geom_line(col = "blue", size = 1) +
geom_point(data = df_long, aes(x = time, y = ndi, col = id, size = 4)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) + #,
#col = "grey", fill = "grey") +
theme(legend.position = "none") + theme
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point(size = 2) +
geom_line(col = "blue", size = 1) +
geom_point(data = df_long, aes(x = time, y = ndi, col = id, size = 3)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) + #,
#col = "grey", fill = "grey") +
theme(legend.position = "none") + theme
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point(size = 2) +
geom_line(col = "blue", size = 1) +
geom_point(data = df_long, aes(x = time, y = ndi, col = id, size = 2)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) + #,
#col = "grey", fill = "grey") +
theme(legend.position = "none") + theme
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point(size = 2) +
geom_line(col = "blue", size = 2) +
geom_point(data = df_long, aes(x = time, y = ndi, col = id, size = 2)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) + #,
#col = "grey", fill = "grey") +
theme(legend.position = "none") + theme
library(ggplot2)
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() +
geom_line(col = "blue", size = 2) +
geom_point(data = df_long, aes(x = time, y = ndi, col = id, size = 0.1)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) + #,
#col = "grey", fill = "grey") +
theme(legend.position = "none") + theme
#model_final <- nlme::lme(ndi ~ time + hads_tot, random = ~1|id, method= "REML", data = df_long)
model_final <- lme4::lmer(ndi ~ time_fct + hads_tot + (1|id), REML= T, data = df_long)
summary(model_final)
rm(list = ls())
library(ggplot2)
library(lme4)
library(tidyverse)
library(nlme)
library(emmeans)
library(car)
library(lattice)
ggCaterpillar <- function(re, QQ=TRUE, likeDotplot=TRUE) {
require(ggplot2)
f <- function(x) {
pv   <- attr(x, "postVar")
cols <- 1:(dim(pv)[1])
se   <- unlist(lapply(cols, function(i) sqrt(pv[i, i, ])))
ord  <- unlist(lapply(x, order)) + rep((0:(ncol(x) - 1)) * nrow(x), each=nrow(x))
pDf  <- data.frame(y=unlist(x)[ord],
ci=1.96*se[ord],
nQQ=rep(qnorm(ppoints(nrow(x))), ncol(x)),
ID=factor(rep(rownames(x), ncol(x))[ord], levels=rownames(x)[ord]),
ind=gl(ncol(x), nrow(x), labels=names(x)))
if(QQ) {  ## normal QQ-plot
p <- ggplot(pDf, aes(nQQ, y))
p <- p + facet_wrap(~ ind, scales="free")
p <- p + xlab("Standard normal quantiles") + ylab("Random effect quantiles")
} else {  ## caterpillar dotplot
p <- ggplot(pDf, aes(ID, y)) + coord_flip()
if(likeDotplot) {  ## imitate dotplot() -> same scales for random effects
p <- p + facet_wrap(~ ind)
} else {           ## different scales for random effects
p <- p + facet_grid(ind ~ ., scales="free_y")
}
p <- p + xlab("Levels") + ylab("Random effects")
}
p <- p + theme(legend.position="none")
p <- p + geom_hline(yintercept=0)
p <- p + geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=0, colour="black")
p <- p + geom_point(aes(size=1.2), colour="blue")
return(p)
}
lapply(re, f)
}
theme <-  theme(#panel.background = element_rect(fill = "lightgrey", colour = "white", size = 4),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
```{r, results='hide'}
df_long <- read.csv("Data/data_final_2019-11-05.csv", sep = ",")
df_long <- df_long %>%
mutate(hads_tot = hads_depr + hads_anx) %>%
select(id, ndi, time, hads_tot) %>%
mutate(ndi = as.numeric(ndi), time = as.numeric(time),
hads_tot = as.numeric(hads_tot), time_fct = as.factor(time))
str(df_long)
levels(df_long$id) <- c(1:109)
df_long <- read.csv("Data/data_final_2019-11-05.csv", sep = ",")
df_long <- df_long %>%
mutate(hads_tot = hads_depr + hads_anx) %>%
select(id, ndi, time, hads_tot) %>%
mutate(ndi = as.numeric(ndi), time = as.numeric(time),
hads_tot = as.numeric(hads_tot), time_fct = as.factor(time))
View(df_long)
#model_final <- nlme::lme(ndi ~ time + hads_tot, random = ~1|id, method= "REML", data = df_long)
model_final <- lme4::lmer(ndi ~ time_fct + hads_tot + (1|id), REML= T, data = df_long)
summary(model_final)
refgrid <-  ref_grid(model_final_emm)
refgrid
model_final_emm <- lme4::lmer(ndi ~ time_fct + hads_tot + (1|id), REML= T, data = df_long)
refgrid <-  ref_grid(model_final_emm)
refgrid
df_emmeans <-  data.frame(summary(refgrid))
df_emmeans$time <- as.numeric(as.character(df_emmeans$time_fct))
df_emmeans$lwr <- df_emmeans$prediction - 1.96*df_emmeans$SE
df_emmeans$upr <- df_emmeans$prediction + 1.96*df_emmeans$SE
View(df_emmeans)
colSums(df_long)
mean(df_long$hads_tot)
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() +
geom_line(col = "blue", size = 2) +
geom_point(data = df_long, aes(x = time, y = ndi, col = id, size = 0.1)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) +
theme(legend.position = "none") + theme +
ggtitle("Estimated marginal mean of NDI over time")
rm(list = ls())
library(ggplot2)
library(lme4)
library(tidyverse)
library(nlme)
library(emmeans)
library(car)
library(lattice)
ggCaterpillar <- function(re, QQ=TRUE, likeDotplot=TRUE) {
require(ggplot2)
f <- function(x) {
pv   <- attr(x, "postVar")
cols <- 1:(dim(pv)[1])
se   <- unlist(lapply(cols, function(i) sqrt(pv[i, i, ])))
ord  <- unlist(lapply(x, order)) + rep((0:(ncol(x) - 1)) * nrow(x), each=nrow(x))
pDf  <- data.frame(y=unlist(x)[ord],
ci=1.96*se[ord],
nQQ=rep(qnorm(ppoints(nrow(x))), ncol(x)),
ID=factor(rep(rownames(x), ncol(x))[ord], levels=rownames(x)[ord]),
ind=gl(ncol(x), nrow(x), labels=names(x)))
if(QQ) {  ## normal QQ-plot
p <- ggplot(pDf, aes(nQQ, y))
p <- p + facet_wrap(~ ind, scales="free")
p <- p + xlab("Standard normal quantiles") + ylab("Random effect quantiles")
} else {  ## caterpillar dotplot
p <- ggplot(pDf, aes(ID, y)) + coord_flip()
if(likeDotplot) {  ## imitate dotplot() -> same scales for random effects
p <- p + facet_wrap(~ ind)
} else {           ## different scales for random effects
p <- p + facet_grid(ind ~ ., scales="free_y")
}
p <- p + xlab("Levels") + ylab("Random effects")
}
p <- p + theme(legend.position="none")
p <- p + geom_hline(yintercept=0)
p <- p + geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=0, colour="black")
p <- p + geom_point(aes(size=1.2), colour="blue")
return(p)
}
lapply(re, f)
}
theme <-  theme(#panel.background = element_rect(fill = "lightgrey", colour = "white", size = 4),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
```{r, results='hide'}
df_long <- read.csv("Data/data_final_2019-11-05.csv", sep = ",")
df_long <- df_long %>%
mutate(hads_tot = hads_depr + hads_anx) %>%
select(id, ndi, time, hads_tot) %>%
mutate(ndi = as.numeric(ndi), time = as.numeric(time),
hads_tot = as.numeric(hads_tot), time_fct = as.factor(time))
df_corr <- df_long %>%
select(id, time, ndi) %>%
#gather(variable, value, -c(ndi:hads_depr)) %>%
#unite(temp, student, variable) %>%
#spread(temp, value)
spread(key = time, value = ndi, sep = "_ndi")
df_corr2 <- df_long %>%
select(id, time, hads_tot) %>%
#gather(variable, value, -c(ndi:hads_depr)) %>%
#unite(temp, student, variable) %>%
#spread(temp, value)
spread(key = time, value = hads_tot, sep = "_hads")
df_corr <- left_join(df_corr, df_corr2, "id")
ggplot(data = df_corr, aes(x = time_ndi0 , y = time_ndi104)) +
geom_point(size = 4) + geom_smooth(method=lm, se = F, size = 1.5) +
#geom_text(x = 5, y = 80, label = lm_eqn(df_long, x = "hads_anx", y = "ndi"), parse = TRUE) +
xlab("NDI score baseline") + ylab("NDI score 2 years")
model2 <- nlme::lme(ndi ~ time + hads_tot, random = ~1|id, method= "ML", data = df_long)
getVarCov(model2)
getVarCov(model2, type = "conditional")
getVarCov(model2, individuals = 1, type = "conditional")
getVarCov(model2, individuals = 2, type = "conditional")
data <-  read.delim("ans.txt")
data <-  read.delim("ans.txt")
getwd()
