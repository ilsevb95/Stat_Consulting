return(p)
}
lapply(re, f)
}
# Set layout for all figures
theme <- theme(panel.background = element_blank(),
panel.grid.major = element_line(colour = "darkgrey", size=0.5),
panel.grid.minor = element_line(colour = "grey",
size=.25,
linetype = "dashed"),
panel.border = element_blank(),
axis.line.x = element_line(colour = "black",
size=0.5,
lineend = "butt"),
axis.line.y = element_line(colour = "black",
size=0.5),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
# Load libraries and read in data
df_long <- read.csv("Data/data_final_2019-11-05.csv", sep = ",")
# Create time factor & center HADS at its mean
df_long$time_fct <- as.factor(df_long$time_fct)
df_long$hads_tot_cnt <- df_long$hads_tot - mean(df_long$hads_tot)
str(df_long)
model_final <- nlme::lme(ndi ~ time_fct + hads_tot_cnt, method = "REML",
random = ~1|id, data = df_long)
summary(model_final)
final_mod_summ <- coef(summary(model_final))
xtable(final_mod_summ)
refgrid <-  ref_grid(model_final)
refgrid
df_emmeans <-  data.frame(summary(refgrid))
df_emmeans$time <- as.numeric(as.character(df_emmeans$time_fct))
df_emmeans$lwr <- df_emmeans$prediction - 1.96*df_emmeans$SE
df_emmeans$upr <- df_emmeans$prediction + 1.96*df_emmeans$SE
# Plot only marginal mean
p3 <- ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() +
geom_line(col = "blue", size = 2) +
geom_point(col = "blue", size = 4) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) +
theme(legend.position = "none") +
ylab("NDI")  + ylim(c(0,50)) +
xlab("Time (weeks)") + theme
plot(p3)
# Plot marginal + raw data
p4 <- ggplot(data = df_emmeans, aes(x = time, y = prediction )) +
geom_point(aes(x=time, y = ndi, col = id), size = 4, alpha = 0.3, data = df_long) +
geom_line(aes(x=time, y =ndi, group = id, col = id), alpha = 0.3, size = 1, data = df_long) +
theme(legend.position = "none") +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.7) +
geom_line( col = "blue", size = 3) +
geom_point(col = "blue", size = 5) +
ylab("NDI")  + ylim(c(0,100)) +
xlab("Time (weeks)") + theme
plot(p4)
# Plot only marginal mean
p3 <- ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() +
geom_line(col = "blue", size = 2) +
geom_point(col = "blue", size = 4) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) +
theme(legend.position = "none") +
ylab("NDI")  + ylim(c(0,50)) +
xlab("Time after surgery (weeks)") + theme
plot(p3)
# Plot marginal + raw data
p4 <- ggplot(data = df_emmeans, aes(x = time, y = prediction )) +
geom_point(aes(x=time, y = ndi, col = id), size = 4, alpha = 0.3, data = df_long) +
geom_line(aes(x=time, y =ndi, group = id, col = id), alpha = 0.3, size = 1, data = df_long) +
theme(legend.position = "none") +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.7) +
geom_line( col = "blue", size = 3) +
geom_point(col = "blue", size = 5) +
ylab("NDI")  + ylim(c(0,100)) +
xlab("Time after surgery (weeks)") + theme
plot(p4)
png("Figures/Marginal_NDI.png",width = 15, height = 7, units='in',res=300)
plot(p3)
dev.off()
png("Figures/Marginal&Raw_NDI.png",width = 15, height = 7, units='in',res=300)
plot(p4)
dev.off()
rr1 <- ranef(model_final,  condVar = T)
set.seed(19950306)
library(ggplot2)
library(lme4)
library(tidyverse)
library(nlme)
library(emmeans)
library(car)
library(lattice)
library(xtable)
library(gridExtra)
library(groupdata2)
ggCaterpillar <- function(re, QQ=TRUE, likeDotplot=TRUE) {
require(ggplot2)
f <- function(x) {
pv   <- attr(x, "postVar")
cols <- 1:(dim(pv)[1])
se   <- unlist(lapply(cols, function(i) sqrt(pv[i, i, ])))
ord  <- unlist(lapply(x, order)) + rep((0:(ncol(x) - 1)) * nrow(x), each=nrow(x))
pDf  <- data.frame(y=unlist(x)[ord],
ci=1.96*se[ord],
nQQ=rep(qnorm(ppoints(nrow(x))), ncol(x)),
ID=factor(rep(rownames(x), ncol(x))[ord], levels=rownames(x)[ord]),
ind=gl(ncol(x), nrow(x), labels=names(x)))
if(QQ) {  ## normal QQ-plot
p <- ggplot(pDf, aes(nQQ, y))
p <- p + facet_wrap(~ ind, scales="free")
p <- p + xlab("Standard normal quantiles") + ylab("Random effect quantiles")
} else {  ## caterpillar dotplot
p <- ggplot(pDf, aes(ID, y)) + coord_flip()
if(likeDotplot) {  ## imitate dotplot() -> same scales for random effects
p <- p + facet_wrap(~ ind)
} else {           ## different scales for random effects
p <- p + facet_grid(ind ~ ., scales="free_y")
}
p <- p + xlab("Levels") + ylab("Random effects")
}
p <- p + theme(legend.position="none")
p <- p + geom_hline(yintercept=0)
p <- p + geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=0, colour="black")
p <- p + geom_point(aes(size=1.2), colour="blue")
return(p)
}
lapply(re, f)
}
model_final <- nlme::lme(ndi ~ time_fct + hads_tot_cnt, method = "REML",
random = ~1|id, data = df_long)
rr1 <- ranef(model_final,  condVar = T)
rr1
randoms<-ranef(model_final, postVar = TRUE)
qq <- attr(ranef(fit1, postVar = TRUE)[[1]], "postVar")
qq <- attr(ranef(model_final, postVar = TRUE)[[1]], "postVar")
qq
randoms
ggCaterpillar(rr1, QQ = F, likeDotplot = T)
model_final_lmer <- lme4::lmer(ndi ~ time_fct + hads_tot_cnt + (1|id), REML = T, data = df_lo)
model_final_lmer <- lme4::lmer(ndi ~ time_fct + hads_tot_cnt + (1|id), REML = T, data = df_long)
rr1 <- ranef(model_final,  condVar = T)
ggCaterpillar(rr1, QQ = F, likeDotplot = T)
ggCaterpillar <- function(re, QQ=TRUE, likeDotplot=TRUE) {
require(ggplot2)
f <- function(x) {
pv   <- attr(x, "postVar")
cols <- 1:(dim(pv)[1])
se   <- unlist(lapply(cols, function(i) sqrt(pv[i, i, ])))
ord  <- unlist(lapply(x, order)) + rep((0:(ncol(x) - 1)) * nrow(x), each=nrow(x))
pDf  <- data.frame(y=unlist(x)[ord],
ci=1.96*se[ord],
nQQ=rep(qnorm(ppoints(nrow(x))), ncol(x)),
ID=factor(rep(rownames(x), ncol(x))[ord], levels=rownames(x)[ord]),
ind=gl(ncol(x), nrow(x), labels=names(x)))
if(QQ) {  ## normal QQ-plot
p <- ggplot(pDf, aes(nQQ, y))
p <- p + facet_wrap(~ ind, scales="free")
p <- p + xlab("Standard normal quantiles") + ylab("Random effect quantiles")
} else {  ## caterpillar dotplot
p <- ggplot(pDf, aes(ID, y)) + coord_flip()
if(likeDotplot) {  ## imitate dotplot() -> same scales for random effects
p <- p + facet_wrap(~ ind)
} else {           ## different scales for random effects
p <- p + facet_grid(ind ~ ., scales="free_y")
}
p <- p + xlab("Levels") + ylab("Random effects")
}
p <- p + theme(legend.position="none")
p <- p + geom_hline(yintercept=0)
p <- p + geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=0, colour="black")
p <- p + geom_point(aes(size=1.2), colour="blue")
return(p)
}
lapply(re, f)
}
rr1 <- ranef(model_final,  condVar = T)
ggCaterpillar(rr1, QQ = F, likeDotplot = T)
ggCaterpillar(rr1)
rr1 <- ranef(model_final_lmer,  condVar = T)
ggCaterpillar(rr1)
ggCaterpillar(rr1, QQ = T, likeDotplot = F)
rr1
which.max(rr1)
which.max(rr1$id)
ggCaterpillar(rr1, QQ = T, likeDotplot = T)
ggCaterpillar(rr1, QQ = F, likeDotplot = T)
df_long %>%
select(id = "L8061002")
View(df_long)
df_long %>%
select(id = "L8061002")
df_long %>%
filter(id = "L8061002")
df_long %>%
filter(id == "L8061002")
model_icc_lmer <- lme4::lmer(ndi ~ 1 + (1|id), REML = T, data = df_long)
summary(model_icc_lmer)
rr2 <- ranef(model_icc_lmer,  condVar = T)
ggCaterpillar(rr2, QQ = F, likeDotplot = T)
df_long %>%
filter(id == "L8061002" | "L8105022")
df_long %>%
filter(id == "L8061002" & "L8105022")
df_long %>%
filter(id == "L8061002" | id = "L8105022")
df_long %>%
filter(id == "L8061002" | id == "L8105022")
model_int <- nlme::lme(ndi ~ time_fct + hads_tot_cnt, method = "REML",
random = ~1|id, data = df_long)
model_int_slope <- nlme::lme(ndi ~ time_fct + hads_tot_cnt, method = "REML",
random = ~1|id+time, data = df_long)
model_int_slope <- nlme::lme(ndi ~ time_fct + hads_tot_cnt, method = "REML",
random = ~1|id+time_fct, data = df_long)
model_int_slope <- nlme::lme(ndi ~ time_fct + hads_tot_cnt, method = "REML",
random = ~1|time_fct, data = df_long)
anova(model_int, model_int_slope)
summary(model_)
summary(model_int_slope)
model_int_slope <- nlme::lme(ndi ~ time_fct + hads_tot_cnt, method = "REML",
random = ~1|id + time_fct, data = df_long)
model_int_slope <- nlme::lme(ndi ~ time_fct + hads_tot_cnt, method = "REML",
random = ~1+ time|id, data = df_long)
summary(model_int_slope)
anova(model_int, model_int_slope)
model_int <- nlme::lme(ndi ~ time_fct + hads_tot_cnt, method = "REML",
random = ~1|id, data = df_long)
model_int_slope <- nlme::lme(ndi ~ time_fct + hads_tot_cnt, method = "REML",
random = ~1+ time|id, data = df_long)
summary(model_int_slope)
anova(model_int, model_int_slope)
model_int_slope <- nlme::lme(ndi ~ time_fct + hads_tot_cnt, method = "REML",
random = ~1+ time_fct|id, data = df_long)
summary(model_int_slope)
anova(model_int, model_int_slope)
df_prediction <- read.csv("Data/data_final_prediction_2019-11-05.csv", sep = ",")
# Center predictors -> makes interpretation intercept easier
# Create new numbering voor de IDs -> for Cross validation
df_prediction <- df_prediction %>%
mutate(id_revalue = as.factor(group_indices_(.,.dots=list("id")))) %>%
mutate(time_fct = as.factor(time_fct)) %>%
mutate(ndi0_cnt =  ndi0 - mean(ndi0)) %>%
mutate(hads0_tot_cnt = hads0_tot - mean(hads0_tot))
# Load libraries
rm(list = ls())
set.seed(19950306)
library(ggplot2)
library(lme4)
library(tidyverse)
library(nlme)
library(emmeans)
library(car)
library(lattice)
library(merTools)
library(xtable)
library(caret)
library(groupdata2)
# Set layout for all figures
theme <- theme(panel.background = element_blank(),
panel.grid.major = element_line(colour = "darkgrey", size=0.5),
panel.grid.minor = element_line(colour = "grey",
size=.25,
linetype = "dashed"),
panel.border = element_blank(),
axis.line.x = element_line(colour = "black",
size=0.5,
lineend = "butt"),
axis.line.y = element_line(colour = "black",
size=0.5),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
df_prediction <- read.csv("Data/data_final_prediction_2019-11-05.csv", sep = ",")
# Center predictors -> makes interpretation intercept easier
# Create new numbering voor de IDs -> for Cross validation
df_prediction <- df_prediction %>%
mutate(id_revalue = as.factor(group_indices_(.,.dots=list("id")))) %>%
mutate(time_fct = as.factor(time_fct)) %>%
mutate(ndi0_cnt =  ndi0 - mean(ndi0)) %>%
mutate(hads0_tot_cnt = hads0_tot - mean(hads0_tot))
str(df_prediction)
df_prediction %>%
filter_all(any_vars(is.na(.)))
df_prediction_with_na <- df_prediction
df_prediction <- df_prediction %>%
drop_na(ndi1_2)
df_prediction <- df_prediction %>%
drop_na(ndi1_2)
model_final <- nlme::lme(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + time_fct, method = "REML",
random = ~1|id, data = df_prediction)
model_final2 <- nlme::lme(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + time_fct, method = "REML",
random = ~1+time_fct|id, data = df_prediction)
anova(model_final, model_final2)
# random intercept
model_final <- nlme::lme(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + time_fct, method = "REML",
random = ~1|id, data = df_prediction)
summary(model_final)
model_icc <- nlme::lme(ndi ~ 1, method = "REML", random = ~1 + time_fct|id, data = df_long)
# Load libraries and read in data
df_long <- read.csv("Data/data_final_2019-11-05.csv", sep = ",")
# Create time factor & center HADS at its mean
df_long$time_fct <- as.factor(df_long$time_fct)
df_long$hads_tot_cnt <- df_long$hads_tot - mean(df_long$hads_tot)
str(df_long)
model_icc <- nlme::lme(ndi ~ 1, method = "REML", random = ~1 + time_fct|id, data = df_long)
summary(model_icc)
model_icc_lmer <- lme4::lmer(ndi ~ 1 + (1 + time_fct|id), REML = T, data = df_long)
# Calculate the intra class correlation:
# Model explains only 24 % of variance
random_effects <- VarCorr(model_icc)
print(random_effects,comp=c("Variance"))
# Load libraries
rm(list = ls())
set.seed(19950306)
library(ggplot2)
library(lme4)
library(tidyverse)
library(nlme)
library(emmeans)
library(car)
library(lattice)
library(merTools)
library(xtable)
library(caret)
library(groupdata2)
# Set layout for all figures
theme <- theme(panel.background = element_blank(),
panel.grid.major = element_line(colour = "darkgrey", size=0.5),
panel.grid.minor = element_line(colour = "grey",
size=.25,
linetype = "dashed"),
panel.border = element_blank(),
axis.line.x = element_line(colour = "black",
size=0.5,
lineend = "butt"),
axis.line.y = element_line(colour = "black",
size=0.5),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
df_prediction <- read.csv("Data/data_final_prediction_2019-11-05.csv", sep = ",")
# Center predictors -> makes interpretation intercept easier
# Create new numbering voor de IDs -> for Cross validation
df_prediction <- df_prediction %>%
mutate(id_revalue = as.factor(group_indices_(.,.dots=list("id")))) %>%
mutate(time_fct = as.factor(time_fct)) %>%
mutate(ndi0_cnt =  ndi0 - mean(ndi0)) %>%
mutate(hads0_tot_cnt = hads0_tot - mean(hads0_tot))
str(df_prediction)
df_prediction %>%
filter_all(any_vars(is.na(.)))
df_prediction_with_na <- df_prediction
df_prediction <- df_prediction %>%
drop_na(ndi1_2)
# random intercept
model_final <- nlme::lme(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + time_fct, method = "REML",
random = ~1|id, data = df_prediction)
# Add new column with folds numbers
K <- 5
df_prediction <- fold(df_prediction, k = K, id_col = "id_revalue") %>%
print(n=Inf)
# Create Loss function: Root Mean Squard Error
Loss <- function(x, y){
mse <- sum((x-y)^2)/length(x)
rmse <- sqrt(mse)
return(rmse)
}
loss <- numeric(K)
list_pred <- c()
for (k in 1:K){
training <- df_prediction[df_prediction$.folds !=k, ]
validation <- df_prediction[df_prediction$.folds ==k, ]
training.fit <-  lme4::lmer(ndi1_2 ~ ndi0 + hads0_anx + hads0_depr + time_fct + (1|id),
data = training, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response',
allow.new.levels = T)
loss[k] <- Loss(validation$ndi1_2, validation.predict)
# Save predictions in list
list_pred[[k]] <- validation %>%
dplyr::select(id_revalue, id, ndi1_2, time_fct, .folds) %>%
mutate(pred = validation.predict)
}
# Show RMSE + SD
loss
RMSE  <- round(mean(loss), digits = 1)
RMSE
round(sd(loss), digits = 1)
df_cv <- do.call("rbind", list_pred)
df_cv52 <- df_cv %>%
filter(time_fct == 52)
df_cv104 <- df_cv %>%
filter(time_fct == 104)
# calculate rmse per time point
df_cv52 <- df_cv52 %>%
group_by(.folds) %>%
mutate(loss = Loss(ndi1_2, pred))
rmse_52 <- unique(df_cv52$loss)
round(mean(rmse_52), 1)
round(sd(rmse_52), 1)
df_cv104 <- df_cv104 %>%
group_by(.folds) %>%
mutate(loss = Loss(ndi1_2, pred))
rmse_104 <- unique(df_cv104$loss)
round(mean(rmse_104), 1)
round(sd(rmse_104), 1)
# Load libraries
rm(list = ls())
set.seed(19950306)
library(ggplot2)
library(lme4)
library(tidyverse)
library(nlme)
library(emmeans)
library(car)
library(lattice)
library(merTools)
library(xtable)
library(caret)
library(groupdata2)
# Set layout for all figures
theme <- theme(panel.background = element_blank(),
panel.grid.major = element_line(colour = "darkgrey", size=0.5),
panel.grid.minor = element_line(colour = "grey",
size=.25,
linetype = "dashed"),
panel.border = element_blank(),
axis.line.x = element_line(colour = "black",
size=0.5,
lineend = "butt"),
axis.line.y = element_line(colour = "black",
size=0.5),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
df_prediction <- read.csv("Data/data_final_prediction_2019-11-05.csv", sep = ",")
# Center predictors -> makes interpretation intercept easier
# Create new numbering voor de IDs -> for Cross validation
df_prediction <- df_prediction %>%
mutate(id_revalue = as.factor(group_indices_(.,.dots=list("id")))) %>%
mutate(time_fct = as.factor(time_fct)) %>%
mutate(ndi0_cnt =  ndi0 - mean(ndi0)) %>%
mutate(hads0_tot_cnt = hads0_tot - mean(hads0_tot))
str(df_prediction)
df_prediction %>%
filter_all(any_vars(is.na(.)))
df_prediction_with_na <- df_prediction
df_prediction <- df_prediction %>%
drop_na(ndi1_2)
# random intercept
model_final <- nlme::lme(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + time_fct, method = "REML",
random = ~1|id, data = df_prediction)
# random intercept + slope
model_final2 <- nlme::lme(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + time_fct, method = "REML",
random = ~1+time_fct|id, data = df_prediction)
anova(model_final, model_final2)
# random intercept
model_final <- nlme::lme(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + time_fct, method = "REML",
random = ~1|id, data = df_prediction)
summary(model_final)
# Load libraries
rm(list = ls())
set.seed(19950306)
library(ggplot2)
library(lme4)
library(tidyverse)
library(nlme)
library(emmeans)
library(car)
library(lattice)
library(merTools)
library(xtable)
library(caret)
library(groupdata2)
# Set layout for all figures
theme <- theme(panel.background = element_blank(),
panel.grid.major = element_line(colour = "darkgrey", size=0.5),
panel.grid.minor = element_line(colour = "grey",
size=.25,
linetype = "dashed"),
panel.border = element_blank(),
axis.line.x = element_line(colour = "black",
size=0.5,
lineend = "butt"),
axis.line.y = element_line(colour = "black",
size=0.5),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
df_prediction <- read.csv("Data/data_final_prediction_2019-11-05.csv", sep = ",")
# Center predictors -> makes interpretation intercept easier
# Create new numbering voor de IDs -> for Cross validation
df_prediction <- df_prediction %>%
mutate(id_revalue = as.factor(group_indices_(.,.dots=list("id")))) %>%
mutate(time_fct = as.factor(time_fct)) %>%
mutate(ndi0_cnt =  ndi0 - mean(ndi0)) %>%
mutate(hads0_tot_cnt = hads0_tot - mean(hads0_tot))
str(df_prediction)
df_prediction %>%
filter_all(any_vars(is.na(.)))
df_prediction_with_na <- df_prediction
df_prediction <- df_prediction %>%
drop_na(ndi1_2)
timestamp <-  c(2,4,7,9)
timestamp2 <- timestamp - timestamp[1]
