geom_point(aes(x = time, y = fit), size = 3, shape = 17) +
geom_ribbon(aes(ymin= lwr, ymax= upr), alpha=0.3) + theme +
ylab("NDI") + xlab("Time (weeks)") +  facet_grid(~id)
ggplot(data = predict_2id, aes(x = time, y = ndi1_2, col = id)) +
geom_line(size = 2, col = "black") +
geom_point(aes(x = time, y = ndi1_2), size = 3) +
geom_line(aes(x = time, y = fit), size = 2, linetype = "dashed") +
geom_point(aes(x = time, y = fit), size = 3, shape = 17) +
geom_ribbon(aes(ymin= lwr, ymax= upr), alpha=0.3) + theme +
ylab("NDI") + xlab("Time (weeks)") +  facet_grid(~id)
ggplot(data = predict_2id, aes(x = time, y = ndi1_2, col = id)) +
geom_line(size = 2, col = "black") +
geom_point(size = 3, col = "black") +
geom_line(aes(x = time, y = fit), size = 2) +
geom_point(aes(x = time, y = fit), size = 3, shape = 17) +
geom_ribbon(aes(ymin= lwr, ymax= upr), alpha=0.3) + theme +
ylab("NDI") + xlab("Time (weeks)") +  facet_grid(~id)
ggplot(data = predict_2id, aes(x = time, y = ndi1_2, col = id)) +
geom_line(size = 2, col = "black") +
geom_point(size = 3, col = "black") +
geom_line(aes(x = time, y = fit), size = 2) +
geom_point(aes(x = time, y = fit), size = 3, shape = 17) +
geom_ribbon(aes(ymin= lwr, ymax= upr), alpha=0.3, col = id) + theme +
ylab("NDI") + xlab("Time (weeks)") +  facet_grid(~id)
ggplot(data = predict_2id, aes(x = time, y = ndi1_2, col = id)) +
geom_line(size = 2, col = "black") +
geom_point(size = 3, col = "black") +
geom_line(aes(x = time, y = fit), size = 2) +
geom_point(aes(x = time, y = fit), size = 3, shape = 17) +
geom_ribbon(aes(ymin= lwr, ymax= upr), alpha=0.3, fill = id) + theme +
ylab("NDI") + xlab("Time (weeks)") +  facet_grid(~id)
ggplot(data = predict_2id, aes(x = time, y = ndi1_2)) +
geom_line(size = 2, col = "black") +
geom_point(size = 3, col = "black") +
geom_line(aes(x = time, y = fit), size = 2) +
geom_point(aes(x = time, y = fit), size = 3, shape = 17) +
geom_ribbon(aes(ymin= lwr, ymax= upr), alpha=0.3) + theme +
ylab("NDI") + xlab("Time (weeks)") +  facet_grid(~id)
ggplot(data = predict_2id, aes(x = time, y = ndi1_2)) +
geom_line(size = 2, col = "black") +
geom_point(size = 3, col = "black") +
geom_line(aes(x = time, y = fit), size = 2, col = id) +
geom_point(aes(x = time, y = fit), size = 3, shape = 17) +
geom_ribbon(aes(ymin= lwr, ymax= upr), alpha=0.3) + theme +
ylab("NDI") + xlab("Time (weeks)") +  facet_grid(~id)
ggplot(data = predict_2id, aes(x = time, y = ndi1_2)) +
geom_line(size = 2, col = "black") +
geom_point(size = 3, col = "black") +
geom_line(aes(x = time, y = fit, col = id), size = 2) +
geom_point(aes(x = time, y = fit), size = 3, shape = 17) +
geom_ribbon(aes(ymin= lwr, ymax= upr), alpha=0.3) + theme +
ylab("NDI") + xlab("Time (weeks)") +  facet_grid(~id)
ggplot(data = predict_2id, aes(x = time, y = ndi1_2)) +
geom_line(size = 2, col = "black") +
geom_point(size = 3, col = "black") +
geom_line(aes(x = time, y = fit, col = id), size = 2) +
geom_point(aes(x = time, y = fit, col = id), size = 3, shape = 17) +
geom_ribbon(aes(ymin= lwr, ymax= upr, col = id), alpha=0.3) + theme +
ylab("NDI") + xlab("Time (weeks)") +  facet_grid(~id)
ggplot(data = predict_2id, aes(x = time, y = ndi1_2)) +
geom_line(size = 2, col = "black") +
geom_point(size = 3, col = "black") +
geom_line(aes(x = time, y = fit, col = id), size = 2) +
geom_point(aes(x = time, y = fit, col = id), size = 3, shape = 17) +
geom_ribbon(aes(ymin= lwr, ymax= upr, col = id, fill = id), alpha=0.3) + theme +
ylab("NDI") + xlab("Time (weeks)") +  facet_grid(~id)
ggplot(data = predict_2id, aes(x = time, y = ndi1_2)) +
geom_line(size = 1.5, col = "black") +
geom_point(size = 3, col = "black") +
geom_line(aes(x = time, y = fit, col = id), size = 1.5) +
geom_point(aes(x = time, y = fit, col = id), size = 3, shape = 17) +
geom_ribbon(aes(ymin= lwr, ymax= upr, col = id, fill = id), alpha=0.3) + theme +
ylab("NDI") + xlab("Time (weeks)") +  facet_grid(~id)
png("Figures/Predicted_ids.png",width = 15, height = 7, units='in',res=300)
plot(ppredict)
dev.off()
ppredict <- ggplot(data = predict_2id, aes(x = time, y = ndi1_2)) +
geom_line(size = 1.5, col = "black") +
geom_point(size = 3, col = "black") +
geom_line(aes(x = time, y = fit, col = id), size = 1.5) +
geom_point(aes(x = time, y = fit, col = id), size = 3, shape = 17) +
geom_ribbon(aes(ymin= lwr, ymax= upr, col = id, fill = id), alpha=0.3) + theme +
ylab("NDI") + xlab("Time (weeks)") +  facet_grid(~id)
plot(ppredict)
png("Figures/Predicted_ids.png",width = 15, height = 7, units='in',res=300)
plot(ppredict)
dev.off()
View(df_prediction)
View(df_prediction)
validation1 <- df_prediction[df_prediction$id == "L8105004",]
training1 <- df_prediction[df_prediction$id != "L8105004", ]
training.fit <-  lmer(ndi1_2 ~ ndi0 + hads0_anx + hads0_depr + time_fct + (1|id),
data = training1, REML = T)
preds1 <- predictInterval(model_final, newdata = validation1, n.sims = 999)
validation1 <- cbind(validation1, preds1)
# Make prediction for subject L8061024
validation2 <- df_prediction[df_prediction$id == "L8061024",]
training2 <- df_prediction[df_prediction$id != "L8061024",]
training.fit <-  lmer(ndi1_2 ~ ndi0 + hads0_anx + hads0_depr + time_fct + (1|id),
data = training2, REML = T)
preds2 <- predictInterval(model_final, newdata = validation2, n.sims = 999)
validation2 <- cbind(validation2, preds2)
# Combine predictions in one dataframe and plot the results
predict_2id <- rbind(validation1, validation2)
validation1
predict_2id$time <- as.numeric(as.character(predict_2id$time_fct))
predict_2id <- predict_2id %>%
#add_row(id = "L8141003", ndi1_2 = 44, fit = 44, time = 0, upr = 44, lwr = 44, .before = 1) %>%
add_row(id = "L8105004", ndi1_2 = 44, fit = 44, time = 0, upr = 44, lwr = 44, .before = 1)
# Combine predictions in one dataframe and plot the results
predict_2id <- rbind(validation1, validation2)
predict_2id$time <- as.numeric(as.character(predict_2id$time_fct))
predict_2id <- predict_2id %>%
#add_row(id = "L8141003", ndi1_2 = 44, fit = 44, time = 0, upr = 44, lwr = 44, .before = 1) %>%
add_row(id = "L8105004", ndi1_2 = 44, fit = 44, time = 0, upr = 44, lwr = 44, .before = 1) %>%
add_row(id = "L8061024", ndi1_2 = 42, fit = 42, time = 0, upr = 42, lwr = 42, .before =  4)
ppredict <- ggplot(data = predict_2id, aes(x = time, y = ndi1_2)) +
geom_line(size = 1.5, col = "black") +
geom_point(size = 3, col = "black") +
geom_line(aes(x = time, y = fit, col = id), size = 1.5) +
geom_point(aes(x = time, y = fit, col = id), size = 3, shape = 17) +
geom_ribbon(aes(ymin= lwr, ymax= upr, col = id, fill = id), alpha=0.3) + theme +
ylab("NDI") + xlab("Time (weeks)") +  facet_grid(~id)
plot(ppredict)
png("Figures/Predicted_ids.png",width = 15, height = 7, units='in',res=300)
plot(ppredict)
dev.off()
model_final_coef <- as.data.frame(coef(model_final))
model_final_coef <- data.frame(coef(model_final))
coef(model_final)
summary(model_final)
model_final_coef <- data.frame(coef(summary(model_final)))
xtable(model_final_coef)
library(xtable)
xtable(model_final_coef)
model_final <- nlme:lme(ndi1_2 ~ ndi0 + hads0_anx + hads0_depr + time_fct, method = "REML",
random = ~1|id, data = df_prediction)
library(nlme)
model_final <- nlme::lme(ndi1_2 ~ ndi0 + hads0_anx + hads0_depr + time_fct, method = "REML",
random = ~1|id, data = df_prediction)
summary(model_final)
model_final_coef <- data.frame(coef(summary(model_final)))
xtable(model_final_coef)
ppredict <- ggplot(data = predict_2id, aes(x = time, y = ndi1_2)) +
geom_line(size = 1.5, col = "black") +
geom_point(size = 3, col = "black") +
geom_line(aes(x = time, y = fit, col = id), size = 1.5) +
geom_point(aes(x = time, y = fit, col = id), size = 3, shape = 17) +
geom_ribbon(aes(ymin= lwr, ymax= upr, col = id, fill = id), alpha=0.3) + theme +
ylab("NDI") + xlab("Time (weeks)") +  facet_grid(~id) + theme(legend.position = none)
ppredict <- ggplot(data = predict_2id, aes(x = time, y = ndi1_2)) +
geom_line(size = 1.5, col = "black") +
geom_point(size = 3, col = "black") +
geom_line(aes(x = time, y = fit, col = id), size = 1.5) +
geom_point(aes(x = time, y = fit, col = id), size = 3, shape = 17) +
geom_ribbon(aes(ymin= lwr, ymax= upr, col = id, fill = id), alpha=0.3) + theme +
ylab("NDI") + xlab("Time (weeks)") +  facet_grid(~id) + theme(legend.position = blank())
ppredict <- ggplot(data = predict_2id, aes(x = time, y = ndi1_2)) +
geom_line(size = 1.5, col = "black") +
geom_point(size = 3, col = "black") +
geom_line(aes(x = time, y = fit, col = id), size = 1.5) +
geom_point(aes(x = time, y = fit, col = id), size = 3, shape = 17) +
geom_ribbon(aes(ymin= lwr, ymax= upr, col = id, fill = id), alpha=0.3) + theme +
ylab("NDI") + xlab("Time (weeks)") +  facet_grid(~id) + theme(legend.position = element.blank())
ppredict <- ggplot(data = predict_2id, aes(x = time, y = ndi1_2)) +
geom_line(size = 1.5, col = "black") +
geom_point(size = 3, col = "black") +
geom_line(aes(x = time, y = fit, col = id), size = 1.5) +
geom_point(aes(x = time, y = fit, col = id), size = 3, shape = 17) +
geom_ribbon(aes(ymin= lwr, ymax= upr, col = id, fill = id), alpha=0.3) + theme +
ylab("NDI") + xlab("Time (weeks)") +  facet_grid(~id) + guides(F)
plot(ppredict)
ppredict <- ggplot(data = predict_2id, aes(x = time, y = ndi1_2)) +
geom_line(size = 1.5, col = "black") +
geom_point(size = 3, col = "black") +
geom_line(aes(x = time, y = fit, col = id), size = 1.5) +
geom_point(aes(x = time, y = fit, col = id), size = 3, shape = 17) +
geom_ribbon(aes(ymin= lwr, ymax= upr, col = id, fill = id), alpha=0.3) + theme +
ylab("NDI") + xlab("Time (weeks)") +  facet_grid(~id) + theme(legend.position = "none")
plot(ppredict)
png("Figures/Predicted_ids.png",width = 15, height = 7, units='in',res=300)
plot(ppredict)
dev.off()
summary(model_final)
# Calculate ICC (amount of var explained)
12.04098 / (12.04098 + 8.958211)
# Calculate ICC (amount of var explained)
12.04098^2 / (12.04098^2 + 8.958211^2)
rm(list = ls())
library(haven)
library(tidyverse)
library(gganimate)
library(tidyverse)
library(gridExtra)
library(xtable)
data <- read_sav("Data/Dataset NECK HADS stuk 12-08-2019 long.sav")
# Visualization set-up
theme <- theme(panel.background = element_blank(),
panel.grid.major = element_line(colour = "darkgrey", size=0.5),
panel.grid.minor = element_line(colour = "grey",
size=.25,
linetype = "dashed"),
panel.border = element_blank(),
axis.line.x = element_line(colour = "black",
size=0.5,
lineend = "butt"),
axis.line.y = element_line(colour = "black",
size=0.5),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
data_missing <- data %>%
select(PATIENTID, PMOMENTX, NDI.Som.GOED, HADSDEPR, HADSANGS) %>%
filter_all(any_vars(is.na(.))) %>%
print(n = Inf)
xtable(data_missing)
write.csv(data_missing, "Data/NECK_trail_missing_values.csv", row.names = F)
#### Cleaning data ####
df_all <- data %>%
dplyr::select(PATIENTID, OPERATIE, PMOMENTX, NDI.Som.GOED, HADSDEPR, HADSANGS, Baseline_HADSANG_Group,
Baseline_HADSDEPR_Group) %>%
rename(id = PATIENTID, surgery = OPERATIE, time = PMOMENTX, ndi = NDI.Som.GOED,
hads_depr = HADSDEPR, hads_anx = HADSANGS, baseline_anx = Baseline_HADSANG_Group,
baseline_depr = Baseline_HADSDEPR_Group)
# One patients has NAs. Manually replace these
df_all %>%
filter(id == "L8103004")
df_all <- df_all %>%
mutate(baseline_depr = ifelse(df_all$id == "L8103004" & df_all$time != 0, 1, NA)) %>%
mutate(baseline_anx = ifelse(df_all$id == "L8103004" & df_all$time != 0, 1, NA))
df_all %>%
filter(id == "L8103004")
# Change to factors and create variables with the label names
df_all$id <- as.factor(df_all$id)
#df_all$di_depr <- as.factor(df_all$di_depr)
df_all$surgery <- as.factor(df_all$surgery)
df_all$baseline_depr <- as.factor(df_all$baseline_depr)
df_all$baseline_anx <- as.factor(df_all$baseline_anx)
df_all$surgery_labels <- df_all$surgery
levels(df_all$surgery_labels) <- c("ACD", "ACDF", "ACDA")
df_all$baseline_depr_labels <- df_all$baseline_depr
levels(df_all$baseline_depr_labels) <- c("non", "doubtful", "cases")
df_all$baseline_anx_labels <- df_all$baseline_anx
levels(df_all$baseline_anx_labels) <- c("non", "doubtful", "cases")
df_week104 <- df_all[df_all$time == 104,]
df_week104$week104_depr <- ifelse(df_week104$hads_depr <= 7, 1,
ifelse(df_week104$hads_depr >= 11, 3, 2))
df_week104$week104_anx <- ifelse(df_week104$hads_anx <= 7, 1,
ifelse(df_week104$hads_anx >= 11, 3, 2))
df_week104 <- df_week104 %>%
dplyr::select(id, time, hads_depr, hads_anx, week104_depr, week104_anx) %>%
mutate(week104_depr_labels = dplyr::recode(week104_depr, "non", "doubtful", "cases")) %>%
mutate(week104_anx_labels = dplyr::recode(week104_anx, "non", "doubtful", "cases"))
df_long <- left_join(df_all, df_week104, by = c("id",  "time", "hads_anx", "hads_depr"))
# remove nas
df_long_no_na <- df_long %>%
drop_na(ndi, hads_anx, hads_depr)
# check if no patient is removed
setdiff(data$PATIENTID, df_long$id)
df_long_no_na
df_long %>%
select(ndi, hads_depr, hads_anx) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(bins = 30) + theme +
ggtitle("Histograms")
df_long
df_long %>%
select(ndi, hads_depr, hads_anx) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(bins = 30) + theme +
ggtitle("Histograms")
df_long %>%
dplyr::select(ndi, hads_depr, hads_anx) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(bins = 30) + theme +
ggtitle("Histograms")
p_demo <- df_long %>%
dplyr::select(ndi, hads_depr, hads_anx) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(bins = 30) + theme +
ggtitle("Histograms")
plot(p_demo)
png("Figures/Histograms.png",width = 15, height = 7, units='in',res=300)
plot(p_demo)
dev.off()
df_long
# Create folds
K <- 5
index <- rep(1:K, floor(nrow(df_prediction)/K)+1)[1:nrow(df_prediction)]
fold.index <- sample(index)
# Create Loss function: Root Mean Squard Error
Loss <- function(x, y){
mse <- sum((x-y)^2)/length(x)
rmse <- sqrt(mse)
return(rmse)
}
loss <- numeric(K)
for (k in 1:K){
training <- df_prediction[fold.index!=k, ]
validation <- df_prediction[fold.index==k, ]
training.fit <-  lmer(ndi1_2 ~ ndi0 + hads0_anx + hads0_depr + time_fct + (1|id),
data = training, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response',
allow.new.levels = T)
loss[k] <- Loss(validation$ndi1_2, validation.predict)
}
set.seed(19950306)
# Load libraries
rm(list = ls())
library(ggplot2)
library(lme4)
library(tidyverse)
library(nlme)
library(emmeans)
library(car)
library(lattice)
library(merTools)
library(xtable)
# Set layout for all figures
theme <- theme(panel.background = element_blank(),
panel.grid.major = element_line(colour = "darkgrey", size=0.5),
panel.grid.minor = element_line(colour = "grey",
size=.25,
linetype = "dashed"),
panel.border = element_blank(),
axis.line.x = element_line(colour = "black",
size=0.5,
lineend = "butt"),
axis.line.y = element_line(colour = "black",
size=0.5),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
df_long <- read.csv("Data/data_final_2019-11-05.csv", sep = ",")
# Some data wrangling
df_long <- df_long %>%
mutate(hads_tot = hads_depr + hads_anx) %>%
select(id, ndi, time, hads_tot, hads_anx, hads_depr) %>%
mutate(ndi = as.numeric(ndi), time = as.numeric(time),
hads_tot = as.numeric(hads_tot), time_fct = as.factor(time))
# Create new dataframe with HADS at time = 0 & NDI at time = 0
df_time0 <- df_long[df_long$time == 0, ]
df_time0 <- select(df_time0, id, ndi, hads_tot, hads_anx, hads_depr)
colnames(df_time0) <-  c("id", "ndi0", "hads0_tot", "hads0_anx", "hads0_depr")
# Create new dataframe with HADS and NDI at 52 and 104 weeks
df_time1_2 <- df_long[df_long$time != 0, ]
df_time1_2 <- select(df_time1_2, id, ndi, time_fct)
colnames(df_time1_2) <-  c("id", "ndi1_2", "time_fct")
# Merge dataframes
df_prediction <- merge(df_time1_2, df_time0, by = "id")
model_final <- nlme::lme(ndi1_2 ~ ndi0 + hads0_anx + hads0_depr + time_fct, method = "REML",
random = ~1|id, data = df_prediction)
# Create folds
K <- 5
index <- rep(1:K, floor(nrow(df_prediction)/K)+1)[1:nrow(df_prediction)]
fold.index <- sample(index)
# Create Loss function: Root Mean Squard Error
Loss <- function(x, y){
mse <- sum((x-y)^2)/length(x)
rmse <- sqrt(mse)
return(rmse)
}
loss <- numeric(K)
for (k in 1:K){
training <- df_prediction[fold.index!=k, ]
validation <- df_prediction[fold.index==k, ]
training.fit <-  lmer(ndi1_2 ~ ndi0 + hads0_anx + hads0_depr + time_fct + (1|id),
data = training, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response',
allow.new.levels = T)
loss[k] <- Loss(validation$ndi1_2, validation.predict)
}
loss
training.fit <-  lme4::lmer(ndi1_2 ~ ndi0 + hads0_anx + hads0_depr + time_fct + (1|id),
data = training, REML = T)
training <- df_prediction[fold.index!=k, ]
validation <- df_prediction[fold.index==k, ]
training.fit <-  lme4::lmer(ndi1_2 ~ ndi0 + hads0_anx + hads0_depr + time_fct + (1|id),
data = training, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response',
allow.new.levels = T)
validation.predict
df_prediction
set.seed(19950306)
# Load libraries
rm(list = ls())
library(ggplot2)
library(lme4)
library(tidyverse)
library(nlme)
library(emmeans)
library(car)
library(lattice)
library(merTools)
library(xtable)
# Set layout for all figures
theme <- theme(panel.background = element_blank(),
panel.grid.major = element_line(colour = "darkgrey", size=0.5),
panel.grid.minor = element_line(colour = "grey",
size=.25,
linetype = "dashed"),
panel.border = element_blank(),
axis.line.x = element_line(colour = "black",
size=0.5,
lineend = "butt"),
axis.line.y = element_line(colour = "black",
size=0.5),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
df_long <- read.csv("Data/data_final_2019-11-05.csv", sep = ",")
# Some data wrangling
df_long <- df_long %>%
mutate(hads_tot = hads_depr + hads_anx) %>%
select(id, ndi, time, hads_tot, hads_anx, hads_depr) %>%
mutate(ndi = as.numeric(ndi), time = as.numeric(time),
hads_tot = as.numeric(hads_tot), time_fct = as.factor(time))
# Create new dataframe with HADS at time = 0 & NDI at time = 0
df_time0 <- df_long[df_long$time == 0, ]
df_long <- read.csv("Data/data_final_2019-11-05.csv", sep = ",")
# Some data wrangling
df_long <- df_long %>%
mutate(hads_tot = hads_depr + hads_anx) %>%
dplyr::select(id, ndi, time, hads_tot, hads_anx, hads_depr) %>%
mutate(ndi = as.numeric(ndi), time = as.numeric(time),
hads_tot = as.numeric(hads_tot), time_fct = as.factor(time))
# Create new dataframe with HADS at time = 0 & NDI at time = 0
df_time0 <- df_long[df_long$time == 0, ]
df_time0 <- select(df_time0, id, ndi, hads_tot, hads_anx, hads_depr)
# Create new dataframe with HADS at time = 0 & NDI at time = 0
df_time0 <- df_long[df_long$time == 0, ]
df_time0 <- dplyr::select(df_time0, id, ndi, hads_tot, hads_anx, hads_depr)
colnames(df_time0) <-  c("id", "ndi0", "hads0_tot", "hads0_anx", "hads0_depr")
# Create new dataframe with HADS and NDI at 52 and 104 weeks
df_time1_2 <- df_long[df_long$time != 0, ]
df_time1_2 <- select(df_time1_2, id, ndi, time_fct)
# Create new dataframe with HADS and NDI at 52 and 104 weeks
df_time1_2 <- df_long[df_long$time != 0, ]
df_time1_2 <- dplyr::select(df_time1_2, id, ndi, time_fct)
colnames(df_time1_2) <-  c("id", "ndi1_2", "time_fct")
# Merge dataframes
df_prediction <- merge(df_time1_2, df_time0, by = "id")
index <- rep(1:K, floor(nrow(df_prediction)/K)+1)[1:nrow(df_prediction)]
fold.index <- sample(index)
# Create Loss function: Root Mean Squard Error
Loss <- function(x, y){
mse <- sum((x-y)^2)/length(x)
rmse <- sqrt(mse)
return(rmse)
}
loss <- numeric(K)
# Create folds
K <- 5
index <- rep(1:K, floor(nrow(df_prediction)/K)+1)[1:nrow(df_prediction)]
fold.index <- sample(index)
# Create Loss function: Root Mean Squard Error
Loss <- function(x, y){
mse <- sum((x-y)^2)/length(x)
rmse <- sqrt(mse)
return(rmse)
}
loss <- numeric(K)
for (k in 1:K){
training <- df_prediction[fold.index!=k, ]
validation <- df_prediction[fold.index==k, ]
training.fit <-  lme4::lmer(ndi1_2 ~ ndi0 + hads0_anx + hads0_depr + time_fct + (1|id),
data = training, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response',
allow.new.levels = T)
loss[k] <- Loss(validation$ndi1_2, validation.predict)
}
loss
round(mean(loss), digits = 1)
df_prediction
loss <- numeric(K)
for (k in 1:K){
training <- df_prediction[fold.index!=k, ]
validation <- df_prediction[fold.index==k, ]
training.fit <-  lme4::lmer(ndi1_2 ~ ndi0 + hads0_anx + hads0_depr + time_fct + (1|id),
data = df_prediction, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response',
allow.new.levels = T)
loss[k] <- Loss(validation$ndi1_2, validation.predict)
}
loss
round(mean(loss), digits = 1)
loss <- numeric(K)
for (k in 1:K){
training <- df_prediction[fold.index!=k, ]
validation <- df_prediction[fold.index==k, ]
training.fit <-  lme4::lmer(ndi1_2 ~ ndi0 + hads0_anx + hads0_depr + time_fct + (1|id),
data = training, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response',
allow.new.levels = T)
loss[k] <- Loss(validation$ndi1_2, validation.predict)
}
loss
round(mean(loss), digits = 1)
