col = "blue", fill = "blue") +
theme + theme(legend.position = "none")
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point(size = 2) +
geom_line(col = "blue", size = 1) +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3,
col = "blue", fill = "blue") +
theme + theme(legend.position = "none")
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point(size = 2) +
geom_line(col = "blue", size = 1) +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3,
col = "grey", fill = "grey") +
theme + theme(legend.position = "none")
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point(size = 2) +
geom_line(col = "blue", size = 1) +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) + #,
#col = "grey", fill = "grey") +
theme(legend.position = "none")
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point(size = 2) +
geom_line(col = "blue", size = 1) +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) + #,
#col = "grey", fill = "grey") +
theme(legend.position = "none") + theme
theme <-  theme(#panel.background = element_rect(fill = "lightgrey", colour = "white", size = 4),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point(size = 2) +
geom_line(col = "blue", size = 1) +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) + #,
#col = "grey", fill = "grey") +
theme(legend.position = "none") + theme
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point(size = 4) +
geom_line(col = "blue", size = 1) +
geom_point(data = df_long, aes(x = time, y = ndi, col = id)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) + #,
#col = "grey", fill = "grey") +
theme(legend.position = "none") + theme
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point(size = 2) +
geom_line(col = "blue", size = 1) +
geom_point(data = df_long, aes(x = time, y = ndi, col = id, size = 4)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) + #,
#col = "grey", fill = "grey") +
theme(legend.position = "none") + theme
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point(size = 2) +
geom_line(col = "blue", size = 1) +
geom_point(data = df_long, aes(x = time, y = ndi, col = id, size = 3)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) + #,
#col = "grey", fill = "grey") +
theme(legend.position = "none") + theme
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point(size = 2) +
geom_line(col = "blue", size = 1) +
geom_point(data = df_long, aes(x = time, y = ndi, col = id, size = 2)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) + #,
#col = "grey", fill = "grey") +
theme(legend.position = "none") + theme
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point(size = 2) +
geom_line(col = "blue", size = 2) +
geom_point(data = df_long, aes(x = time, y = ndi, col = id, size = 2)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) + #,
#col = "grey", fill = "grey") +
theme(legend.position = "none") + theme
library(ggplot2)
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() +
geom_line(col = "blue", size = 2) +
geom_point(data = df_long, aes(x = time, y = ndi, col = id, size = 0.1)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) + #,
#col = "grey", fill = "grey") +
theme(legend.position = "none") + theme
#model_final <- nlme::lme(ndi ~ time + hads_tot, random = ~1|id, method= "REML", data = df_long)
model_final <- lme4::lmer(ndi ~ time_fct + hads_tot + (1|id), REML= T, data = df_long)
summary(model_final)
rm(list = ls())
library(ggplot2)
library(lme4)
library(tidyverse)
library(nlme)
library(emmeans)
library(car)
library(lattice)
ggCaterpillar <- function(re, QQ=TRUE, likeDotplot=TRUE) {
require(ggplot2)
f <- function(x) {
pv   <- attr(x, "postVar")
cols <- 1:(dim(pv)[1])
se   <- unlist(lapply(cols, function(i) sqrt(pv[i, i, ])))
ord  <- unlist(lapply(x, order)) + rep((0:(ncol(x) - 1)) * nrow(x), each=nrow(x))
pDf  <- data.frame(y=unlist(x)[ord],
ci=1.96*se[ord],
nQQ=rep(qnorm(ppoints(nrow(x))), ncol(x)),
ID=factor(rep(rownames(x), ncol(x))[ord], levels=rownames(x)[ord]),
ind=gl(ncol(x), nrow(x), labels=names(x)))
if(QQ) {  ## normal QQ-plot
p <- ggplot(pDf, aes(nQQ, y))
p <- p + facet_wrap(~ ind, scales="free")
p <- p + xlab("Standard normal quantiles") + ylab("Random effect quantiles")
} else {  ## caterpillar dotplot
p <- ggplot(pDf, aes(ID, y)) + coord_flip()
if(likeDotplot) {  ## imitate dotplot() -> same scales for random effects
p <- p + facet_wrap(~ ind)
} else {           ## different scales for random effects
p <- p + facet_grid(ind ~ ., scales="free_y")
}
p <- p + xlab("Levels") + ylab("Random effects")
}
p <- p + theme(legend.position="none")
p <- p + geom_hline(yintercept=0)
p <- p + geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=0, colour="black")
p <- p + geom_point(aes(size=1.2), colour="blue")
return(p)
}
lapply(re, f)
}
theme <-  theme(#panel.background = element_rect(fill = "lightgrey", colour = "white", size = 4),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
```{r, results='hide'}
df_long <- read.csv("Data/data_final_2019-11-05.csv", sep = ",")
df_long <- df_long %>%
mutate(hads_tot = hads_depr + hads_anx) %>%
select(id, ndi, time, hads_tot) %>%
mutate(ndi = as.numeric(ndi), time = as.numeric(time),
hads_tot = as.numeric(hads_tot), time_fct = as.factor(time))
str(df_long)
levels(df_long$id) <- c(1:109)
df_long <- read.csv("Data/data_final_2019-11-05.csv", sep = ",")
df_long <- df_long %>%
mutate(hads_tot = hads_depr + hads_anx) %>%
select(id, ndi, time, hads_tot) %>%
mutate(ndi = as.numeric(ndi), time = as.numeric(time),
hads_tot = as.numeric(hads_tot), time_fct = as.factor(time))
View(df_long)
#model_final <- nlme::lme(ndi ~ time + hads_tot, random = ~1|id, method= "REML", data = df_long)
model_final <- lme4::lmer(ndi ~ time_fct + hads_tot + (1|id), REML= T, data = df_long)
summary(model_final)
refgrid <-  ref_grid(model_final_emm)
refgrid
model_final_emm <- lme4::lmer(ndi ~ time_fct + hads_tot + (1|id), REML= T, data = df_long)
refgrid <-  ref_grid(model_final_emm)
refgrid
df_emmeans <-  data.frame(summary(refgrid))
df_emmeans$time <- as.numeric(as.character(df_emmeans$time_fct))
df_emmeans$lwr <- df_emmeans$prediction - 1.96*df_emmeans$SE
df_emmeans$upr <- df_emmeans$prediction + 1.96*df_emmeans$SE
View(df_emmeans)
colSums(df_long)
mean(df_long$hads_tot)
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() +
geom_line(col = "blue", size = 2) +
geom_point(data = df_long, aes(x = time, y = ndi, col = id, size = 0.1)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) +
theme(legend.position = "none") + theme +
ggtitle("Estimated marginal mean of NDI over time")
rm(list = ls())
library(ggplot2)
library(lme4)
library(tidyverse)
library(nlme)
library(emmeans)
library(car)
library(lattice)
ggCaterpillar <- function(re, QQ=TRUE, likeDotplot=TRUE) {
require(ggplot2)
f <- function(x) {
pv   <- attr(x, "postVar")
cols <- 1:(dim(pv)[1])
se   <- unlist(lapply(cols, function(i) sqrt(pv[i, i, ])))
ord  <- unlist(lapply(x, order)) + rep((0:(ncol(x) - 1)) * nrow(x), each=nrow(x))
pDf  <- data.frame(y=unlist(x)[ord],
ci=1.96*se[ord],
nQQ=rep(qnorm(ppoints(nrow(x))), ncol(x)),
ID=factor(rep(rownames(x), ncol(x))[ord], levels=rownames(x)[ord]),
ind=gl(ncol(x), nrow(x), labels=names(x)))
if(QQ) {  ## normal QQ-plot
p <- ggplot(pDf, aes(nQQ, y))
p <- p + facet_wrap(~ ind, scales="free")
p <- p + xlab("Standard normal quantiles") + ylab("Random effect quantiles")
} else {  ## caterpillar dotplot
p <- ggplot(pDf, aes(ID, y)) + coord_flip()
if(likeDotplot) {  ## imitate dotplot() -> same scales for random effects
p <- p + facet_wrap(~ ind)
} else {           ## different scales for random effects
p <- p + facet_grid(ind ~ ., scales="free_y")
}
p <- p + xlab("Levels") + ylab("Random effects")
}
p <- p + theme(legend.position="none")
p <- p + geom_hline(yintercept=0)
p <- p + geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=0, colour="black")
p <- p + geom_point(aes(size=1.2), colour="blue")
return(p)
}
lapply(re, f)
}
theme <-  theme(#panel.background = element_rect(fill = "lightgrey", colour = "white", size = 4),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
```{r, results='hide'}
df_long <- read.csv("Data/data_final_2019-11-05.csv", sep = ",")
df_long <- df_long %>%
mutate(hads_tot = hads_depr + hads_anx) %>%
select(id, ndi, time, hads_tot) %>%
mutate(ndi = as.numeric(ndi), time = as.numeric(time),
hads_tot = as.numeric(hads_tot), time_fct = as.factor(time))
df_corr <- df_long %>%
select(id, time, ndi) %>%
#gather(variable, value, -c(ndi:hads_depr)) %>%
#unite(temp, student, variable) %>%
#spread(temp, value)
spread(key = time, value = ndi, sep = "_ndi")
df_corr2 <- df_long %>%
select(id, time, hads_tot) %>%
#gather(variable, value, -c(ndi:hads_depr)) %>%
#unite(temp, student, variable) %>%
#spread(temp, value)
spread(key = time, value = hads_tot, sep = "_hads")
df_corr <- left_join(df_corr, df_corr2, "id")
ggplot(data = df_corr, aes(x = time_ndi0 , y = time_ndi104)) +
geom_point(size = 4) + geom_smooth(method=lm, se = F, size = 1.5) +
#geom_text(x = 5, y = 80, label = lm_eqn(df_long, x = "hads_anx", y = "ndi"), parse = TRUE) +
xlab("NDI score baseline") + ylab("NDI score 2 years")
model2 <- nlme::lme(ndi ~ time + hads_tot, random = ~1|id, method= "ML", data = df_long)
getVarCov(model2)
getVarCov(model2, type = "conditional")
getVarCov(model2, individuals = 1, type = "conditional")
getVarCov(model2, individuals = 2, type = "conditional")
data <-  read.delim("ans.txt")
data <-  read.delim("ans.txt")
getwd()
df_long <- read.csv("Data/data_final_2019-11-05.csv", sep = ",")
df_long <- df_long %>%
mutate(hads_tot = hads_depr + hads_anx) %>%
select(id, ndi, time, hads_tot) %>%
mutate(ndi = as.numeric(ndi), time = as.numeric(time),
hads_tot = as.numeric(hads_tot), time_fct = as.factor(time))
rm(list = ls())
library(ggplot2)
library(lme4)
library(tidyverse)
library(nlme)
library(emmeans)
library(car)
library(lattice)
theme <-  theme(#panel.background = element_rect(fill = "lightgrey", colour = "white", size = 4),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
df_long <- read.csv("Data/data_final_2019-11-05.csv", sep = ",")
df_long <- df_long %>%
mutate(hads_tot = hads_depr + hads_anx) %>%
select(id, ndi, time, hads_tot) %>%
mutate(ndi = as.numeric(ndi), time = as.numeric(time),
hads_tot = as.numeric(hads_tot), time_fct = as.factor(time))
View(df_long)
View(df_long)
# Create columns with HADS at time = 0 & NDI at time = 0
df_time0 <- df_long[df_long$time = 0, ]
# Create columns with HADS at time = 0 & NDI at time = 0
df_time0 <- df_long[df_long$time == 0, ]
View(df_time0)
colnames(df_time0)
df_time0 <- select(df_time0, id, ndi. hads_tot)
df_time0 <- select(df_time0, id, ndi, hads_tot)
View(df_time0)
colnames(df_time0) <-  c("id", "ndi0", "hads0")
df_time1_2 <- df_long[df_long$time != 0, ]
df_time1_2 <- select(df_time1_2, id, ndi, hads_tot)
df_time1_2 <- df_long[df_long$time != 0, ]
df_time1_2 <- select(df_time1_2, id, ndi, time)
colnames(df_time1_2) <-  c("id", "ndi1_2", "time")
df_prediction <- merge(df_time1_2, df_time0, by = "id")
View(df_prediction)
model_pred <- lmer(ndi1_2 ~ ndi0 + hads0 + time + (1|id), data = df_prediction, REML = F)
summary(model_pred)
model_pred2 <- lmer(ndi1_2 ~ ndi0 + hads0 + (1|id), data = df_prediction, REML = F)
summary(model_pred2)
anova(model_pred1, model_pred2)
model_pred1 <- lmer(ndi1_2 ~ ndi0 + hads0 + time + (1|id), data = df_prediction, REML = F)
model_pred2 <- lmer(ndi1_2 ~ ndi0 + hads0 + (1|id), data = df_prediction, REML = F)
summary(model_pred2)
anova(model_pred1, model_pred2)
anova(model_pred2, model_pred1)
model_final <- lmer(ndi1_2 ~ ndi0 + hads0 + (1|id), data = df_prediction, REML = T)
summary(model_final)
summary(model_pred2)
summary(model_pred1)
summary(model_pred1)
summary(model_pred2)
predict(model_final)
#model_final <- nlme::lme(ndi ~ time + hads_tot, random = ~1|id, method= "REML", data = df_long)
model_final <- lme4::lmer(ndi ~ time_fct + hads_tot + (1|id), REML= T, data = df_long)
summary(model_final)
random_effects <- VarCorr(model_final)
print(random_effects,comp=c("Variance"))
# Calculate the intra class correlation:
# Model explains only 46.9 % of variance
83.300 / ( 83.300 +  94.349)
rr1 <- ranef(model_final,  condVar = T)
ggCaterpillar(rr1, QQ = F, likeDotplot = T)
# Load libraries
rm(list = ls())
library(ggplot2)
library(lme4)
library(tidyverse)
library(nlme)
library(emmeans)
library(car)
library(lattice)
theme <-  theme(#panel.background = element_rect(fill = "lightgrey", colour = "white", size = 4),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
df_long <- read.csv("Data/data_final_2019-11-05.csv", sep = ",")
# Some data wrangling
df_long <- df_long %>%
mutate(hads_tot = hads_depr + hads_anx) %>%
select(id, ndi, time, hads_tot) %>%
mutate(ndi = as.numeric(ndi), time = as.numeric(time),
hads_tot = as.numeric(hads_tot), time_fct = as.factor(time))
# Create new dataframe with HADS at time = 0 & NDI at time = 0
df_time0 <- df_long[df_long$time == 0, ]
df_time0 <- select(df_time0, id, ndi, hads_tot)
colnames(df_time0) <-  c("id", "ndi0", "hads0")
# Create new dataframe with HADS and NDI at 52 and 104 weeks
df_time1_2 <- df_long[df_long$time != 0, ]
df_time1_2 <- select(df_time1_2, id, ndi, time)
colnames(df_time1_2) <-  c("id", "ndi1_2", "time")
# Merge dataframes
df_prediction <- merge(df_time1_2, df_time0, by = "id")
model_pred1 <- lmer(ndi1_2 ~ ndi0 + hads0 + time + (1|id), data = df_prediction, REML = F)
model_pred2 <- lmer(ndi1_2 ~ ndi0 + hads0 + (1|id), data = df_prediction, REML = F)
anova(model_pred2, model_pred1)
summary(model_pred2)
model_final <- lmer(ndi1_2 ~ ndi0 + hads0 + (1|id), data = df_prediction, REML = T)
summary(model_final)
predict(model_final)
model_final <- lmer(ndi1_2 ~ ndi0 + hads0 + time + (1|id), data = df_prediction, REML = T)
summary(model_final)
# Load libraries
rm(list = ls())
library(ggplot2)
library(lme4)
library(tidyverse)
library(nlme)
library(emmeans)
library(car)
library(lattice)
theme <-  theme(#panel.background = element_rect(fill = "lightgrey", colour = "white", size = 4),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
df_long <- read.csv("Data/data_final_2019-11-05.csv", sep = ",")
# Some data wrangling
df_long <- df_long %>%
mutate(hads_tot = hads_depr + hads_anx) %>%
select(id, ndi, time, hads_tot) %>%
mutate(ndi = as.numeric(ndi), time = as.numeric(time),
hads_tot = as.numeric(hads_tot), time_fct = as.factor(time))
# Create new dataframe with HADS at time = 0 & NDI at time = 0
df_time0 <- df_long[df_long$time == 0, ]
df_time0 <- select(df_time0, id, ndi, hads_tot)
colnames(df_time0) <-  c("id", "ndi0", "hads0")
# Create new dataframe with HADS and NDI at 52 and 104 weeks
df_time1_2 <- df_long[df_long$time != 0, ]
df_time1_2 <- select(df_time1_2, id, ndi, time_fct)
colnames(df_time1_2) <-  c("id", "ndi1_2", "time_fct")
# Merge dataframes
df_prediction <- merge(df_time1_2, df_time0, by = "id")
model_pred1 <- lmer(ndi1_2 ~ ndi0 + hads0 + time + (1|id), data = df_prediction, REML = F)
model_pred2 <- lmer(ndi1_2 ~ ndi0 + hads0 + (1|id), data = df_prediction, REML = F)
summary(model_pred2)
summary(model_pred1)
model_pred1 <- lmer(ndi1_2 ~ ndi0 + hads0 + time_fct + (1|id), data = df_prediction, REML = F)
model_pred2 <- lmer(ndi1_2 ~ ndi0 + hads0 + (1|id), data = df_prediction, REML = F)
summary(model_pred2)
summary(model_pred1)
View(df_prediction)
model_final <- lmer(ndi1_2 ~ ndi0 + hads0 + time_fct + (1|id), data = df_prediction, REML = T)
summary(model_final)
predict(model_final)
set.seed(19950306)
# Create folds
index <- rep(1:K, floor(df_prediction(mtcars)/K)+1)[1:nrow(df_prediction)]
fold.index <- sample(index)
# Create folds
K <- 5
index <- rep(1:K, floor(df_prediction(mtcars)/K)+1)[1:nrow(df_prediction)]
index <- rep(1:K, floor(df_prediction(df_prediction)/K)+1)[1:nrow(df_prediction)]
index <- rep(1:K, floor(nrow(df_prediction)/K)+1)[1:nrow(df_prediction)]
fold.index <- sample(index)
# Create Loss function
Loss <- function(x, y){
sum((x-y)^2)/length(x)
}
loss <- numeric(K)
for (k in 1:K){
training <- df_prediction[fold.index!=k, ]
validation <- df_prediction[fold.index==k, ]
lmer(ndi1_2 ~ ndi0 + hads0 + time_fct + (1|id), data = df_prediction, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response')
loss[k] <- Loss(validation$ndi1_2, validation.predict)
}
# Create Loss function
Loss <- function(x, y){
sum((x-y)^2)/length(x)
}
loss <- numeric(K)
for (k in 1:K){
training <- df_prediction[fold.index!=k, ]
validation <- df_prediction[fold.index==k, ]
training.fit <- lmer(ndi1_2 ~ ndi0 + hads0 + time_fct + (1|id),
data = df_prediction, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response')
loss[k] <- Loss(validation$ndi1_2, validation.predict)
}
mean(loss)
loss
validation.predict
validation$ndi1_2
validation.predict <- round(validation.predict, digits = 0)
validation.predict
validation$ndi1_2
Loss(validation$ndi1_2, validation.predict)
# Create folds
K <- 5
index <- rep(1:K, floor(nrow(df_prediction)/K)+1)[1:nrow(df_prediction)]
fold.index <- sample(index)
# Create Loss function
Loss <- function(x, y){
sum((x-y)^2)/length(x)
}
loss <- numeric(K)
for (k in 1:K){
training <- df_prediction[fold.index!=k, ]
validation <- df_prediction[fold.index==k, ]
training.fit <- lmer(ndi1_2 ~ ndi0 + hads0 + time_fct + (1|id),
data = df_prediction, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response')
validation.predict <- round(validation.predict, digits = 0)
loss[k] <- Loss(validation$ndi1_2, validation.predict)
}
mean(loss)
# Create Loss function: Root Mean Squard Error
Loss <- function(x, y){
mse <- sum((x-y)^2)/length(x)
rmse <- sqrt(mse)
return(rmse)
}
loss <- numeric(K)
for (k in 1:K){
training <- df_prediction[fold.index!=k, ]
validation <- df_prediction[fold.index==k, ]
training.fit <- lmer(ndi1_2 ~ ndi0 + hads0 + time_fct + (1|id),
data = df_prediction, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response')
validation.predict <- round(validation.predict, digits = 0)
loss[k] <- Loss(validation$ndi1_2, validation.predict)
}
mean(loss)
loss
# Create Loss function: Root Mean Squard Error
Loss <- function(x, y){
mse <- sum((x-y)^2)/length(x)
rmse <- sqrt(mse)
return(rmse)
}
loss <- numeric(K)
for (k in 1:K){
training <- df_prediction[fold.index!=k, ]
validation <- df_prediction[fold.index==k, ]
training.fit <- lmer(ndi1_2 ~ ndi0 + hads0 + time_fct + (1|id),
data = df_prediction, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response')
#validation.predict <- round(validation.predict, digits = 0)
loss[k] <- Loss(validation$ndi1_2, validation.predict)
}
loss
mean(loss)
fold.index
summary(fold.index)
count(fold.index)
(validation$ndi1_2 - validation.predict
)
loss
mean(loss)
1:nrow(df_prediction)
View(df_long)
summary(df_long$ndi)
shiny::runApp()
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
