legend.title = element_blank())
df_long <- read.csv("Data/data_final_2019-11-05.csv", sep = ",")
# Some data wrangling
df_long <- df_long %>%
mutate(hads_tot = hads_depr + hads_anx) %>%
select(id, ndi, time, hads_tot, hads_anx, hads_depr) %>%
mutate(ndi = as.numeric(ndi), time = as.numeric(time),
hads_tot = as.numeric(hads_tot), time_fct = as.factor(time))
# Create new dataframe with HADS at time = 0 & NDI at time = 0
df_time0 <- df_long[df_long$time == 0, ]
df_time0 <- select(df_time0, id, ndi, hads_tot, hads_anx, hads_depr)
colnames(df_time0) <-  c("id", "ndi0", "hads0_tot", "hads0_anx", "hads0_depr")
# Create new dataframe with HADS and NDI at 52 and 104 weeks
df_time1_2 <- df_long[df_long$time != 0, ]
df_time1_2 <- select(df_time1_2, id, ndi, time_fct)
colnames(df_time1_2) <-  c("id", "ndi1_2", "time_fct")
# Merge dataframes
df_prediction <- merge(df_time1_2, df_time0, by = "id")
df_train <- df_prediction[c(1:240), ]
df_test <- df_prediction[c(241:nrow(df_prediction)), ]
model_final <- lmer(ndi1_2 ~ ndi0 + hads0_anx + hads0_depr + time_fct + (1|id),
data = df_train, REML = T)
summary(model_final)
predictions <- predict(model_final,  newdata = df_test, type='response')
View(df_test)
View(df_train)
nrow(df_prediction)
View(df_prediction)
187 * (2/3)
df_train <- df_prediction[c(1:124), ]
df_test <- df_prediction[c(125:nrow(df_prediction)), ]
model_final <- lmer(ndi1_2 ~ ndi0 + hads0_anx + hads0_depr + time_fct + (1|id),
data = df_train, REML = T)
summary(model_final)
predictions <- predict(model_final,  newdata = df_test, type='response')
predictions
df_test
predictions <- predict(model_final,  newdata = df_test, type='response', allow.new.levels = T)
predictions
View(df_test)
mean((df_test[,2] - predictions)^2)
predictions
df_test[,2]
# Create folds
K <- 5
index <- rep(1:K, floor(nrow(df_prediction)/K)+1)[1:nrow(df_prediction)]
fold.index <- sample(index)
# Create Loss function: Root Mean Squard Error
Loss <- function(x, y){
mse <- sum((x-y)^2)/length(x)
rmse <- sqrt(mse)
return(rmse)
}
sqrt(mean((df_test[,2] - predictions)^2))
# Create folds
K <- 5
index <- rep(1:K, floor(nrow(df_prediction)/K)+1)[1:nrow(df_prediction)]
fold.index <- sample(index)
# Create Loss function: Root Mean Squard Error
Loss <- function(x, y){
mse <- sum((x-y)^2)/length(x)
rmse <- sqrt(mse)
return(rmse)
}
loss <- numeric(K)
for (k in 1:K){
training <- df_prediction[fold.index!=k, ]
validation <- df_prediction[fold.index==k, ]
training.fit <- model_final
validation.predict <- predict(training.fit, newdata=validation, type='response')
loss[k] <- Loss(validation$ndi1_2, validation.predict)
}
loss
round(mean(loss), digits = 1)
View(df_prediction)
# Create folds
K <- 5
index <- rep(1:K, floor(nrow(df_prediction)/K)+1)[1:nrow(df_prediction)]
fold.index <- sample(index)
training.fit
loss <- numeric(K)
for (k in 1:K){
training <- df_prediction[fold.index!=k, ]
validation <- df_prediction[fold.index==k, ]
training.fit <-  lmer(ndi1_2 ~ ndi0 + hads0_anx + hads0_depr + time_fct + (1|id),
data = df_prediction, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response')
loss[k] <- Loss(validation$ndi1_2, validation.predict)
}
loss
round(mean(loss), digits = 1)
loss <- numeric(K)
for (k in 1:K){
training <- df_prediction[fold.index!=k, ]
validation <- df_prediction[fold.index==k, ]
training.fit <-  lmer(ndi1_2 ~ ndi0 + hads0_anx + hads0_depr + time_fct + (1|id),
data = training, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response')
loss[k] <- Loss(validation$na1_2, validation.predict)
}
loss
for (k in 1:K){
training <- df_prediction[fold.index!=k, ]
validation <- df_prediction[fold.index==k, ]
training.fit <-  lmer(ndi1_2 ~ ndi0 + hads0_anx + hads0_depr + time_fct + (1|id),
data = training, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response', allow.new.levels = T)
loss[k] <- Loss(validation$na1_2, validation.predict)
}
loss
round(mean(loss), digits = 1)
View(validation)
loss <- numeric(K)
for (k in 1:K){
training <- df_prediction[fold.index!=k, ]
validation <- df_prediction[fold.index==k, ]
training.fit <-  lmer(ndi1_2 ~ ndi0 + hads0_anx + hads0_depr + time_fct + (1|id),
data = training, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response',
allow.new.levels = T)
loss[k] <- Loss(validation$ndi1_2, validation.predict)
}
loss
round(mean(loss), digits = 1)
rm(list = ls())
library(ggplot2)
library(lme4)
library(tidyverse)
library(nlme)
library(emmeans)
library(car)
library(lattice)
library(extrafont)
ggCaterpillar <- function(re, QQ=TRUE, likeDotplot=TRUE) {
require(ggplot2)
f <- function(x) {
pv   <- attr(x, "postVar")
cols <- 1:(dim(pv)[1])
se   <- unlist(lapply(cols, function(i) sqrt(pv[i, i, ])))
ord  <- unlist(lapply(x, order)) + rep((0:(ncol(x) - 1)) * nrow(x), each=nrow(x))
pDf  <- data.frame(y=unlist(x)[ord],
ci=1.96*se[ord],
nQQ=rep(qnorm(ppoints(nrow(x))), ncol(x)),
ID=factor(rep(rownames(x), ncol(x))[ord], levels=rownames(x)[ord]),
ind=gl(ncol(x), nrow(x), labels=names(x)))
if(QQ) {  ## normal QQ-plot
p <- ggplot(pDf, aes(nQQ, y))
p <- p + facet_wrap(~ ind, scales="free")
p <- p + xlab("Standard normal quantiles") + ylab("Random effect quantiles")
} else {  ## caterpillar dotplot
p <- ggplot(pDf, aes(ID, y)) + coord_flip()
if(likeDotplot) {  ## imitate dotplot() -> same scales for random effects
p <- p + facet_wrap(~ ind)
} else {           ## different scales for random effects
p <- p + facet_grid(ind ~ ., scales="free_y")
}
p <- p + xlab("Levels") + ylab("Random effects")
}
p <- p + theme(legend.position="none")
p <- p + geom_hline(yintercept=0)
p <- p + geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=0, colour="black")
p <- p + geom_point(aes(size=1.2), colour="blue")
return(p)
}
lapply(re, f)
}
theme <-  theme(#panel.background = element_rect(fill = "lightgrey", colour = "white", size = 4),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
df_long <- read.csv("Data/data_final_2019-11-05.csv", sep = ",")
df_long <- df_long %>%
mutate(hads_tot = hads_depr + hads_anx) %>%
select(id, ndi, time, hads_tot, hads_anx, hads_depr ) %>%
mutate(ndi = as.numeric(ndi), time = as.numeric(time),
hads_tot = as.numeric(hads_tot), time_fct = as.factor(time))
df_corr <- df_long %>%
select(id, time, ndi) %>%
#gather(variable, value, -c(ndi:hads_depr)) %>%
#unite(temp, student, variable) %>%
#spread(temp, value)
spread(key = time, value = ndi, sep = "_ndi")
df_corr2 <- df_long %>%
select(id, time, hads_tot) %>%
#gather(variable, value, -c(ndi:hads_depr)) %>%
#unite(temp, student, variable) %>%
#spread(temp, value)
spread(key = time, value = hads_tot, sep = "_hads")
df_corr <- left_join(df_corr, df_corr2, "id")
ggplot(data = df_corr, aes(x = time_ndi0 , y = time_ndi104)) +
geom_point(size = 4) + geom_smooth(method=lm, se = F, size = 1.5) +
#geom_text(x = 5, y = 80, label = lm_eqn(df_long, x = "hads_anx", y = "ndi"), parse = TRUE) +
xlab("NDI score baseline") + ylab("NDI score 2 years")
# Homogeneity of variance
plot(resid(model5))
df_long[c(34, 289), ]
# Normally distributed residuals
qqPlot(resid(model5))
model1 <- nlme::lme(ndi ~ time_fct, random = ~1|id, method= "ML", data = df_long)
model2 <- nlme::lme(ndi ~ time_fct + hads_tot, random = ~1|id, method= "ML", data = df_long)
model3 <- nlme::lme(ndi ~ time_fct + hads_tot + time:hads_tot, random = ~1|id, method= "ML",
data = df_long)
model4 <- nlme::lme(ndi ~ time_fct  + hads_depr, random = ~1|id, method= "ML",
data = df_long)
model5 <- nlme::lme(ndi ~ time_fct + hads_anx + hads_depr, random = ~1|id, method= "ML",
data = df_long)
anova(model1, model2)
anova(model2, model3)
anova(model4, model5)
summary(model5)
vif(model5)
# Homogeneity of variance
plot(resid(model5))
# Homogeneity of variance
par(mfrow(c(1,3)))
# Homogeneity of variance
par(mfrow = (c(1,3)))
plot(resid(model5))
df_long[c(34, 289), ]
# Normally distributed residuals
qqPlot(resid(model5))
# Influencial points
infl2 = influence(model5, obs = T)
cooksd = cooks.distance(infl2) # two outliers,
plot(cooksd, pch="*", cex=2, main="Influential Obs by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cooksd, na.rm=T), col="red")  # add cutoff line
text(x = 1:length(cooksd) , y=cooksd, labels=ifelse(cooksd> 4*mean(cooksd, na.rm = T),
1:length(cooksd),""), col="blue", pos =2)
df_long[c(289, 27, 287, 143), ]
theme <- theme(plot.margin = unit(c(2, 2, 1, 1), "cm"))
ggplot(data = df_corr, aes(x = time_ndi0 , y = time_ndi104)) +
geom_point(size = 4) + geom_smooth(method=lm, se = F, size = 1.5) +
#geom_text(x = 5, y = 80, label = lm_eqn(df_long, x = "hads_anx", y = "ndi"), parse = TRUE) +
xlab("NDI score baseline") + ylab("NDI score 2 years") + theme
ggplot(data = df_corr, aes(x = time_ndi0 , y = time_ndi104)) +
geom_point(size = 4) + geom_smooth(method=lm, se = F, size = 1.5) +
#geom_text(x = 5, y = 80, label = lm_eqn(df_long, x = "hads_anx", y = "ndi"), parse = TRUE) +
xlab("NDI score baseline") + ylab("NDI score 2 years") + theme_bw()
theme <- theme(panel.background = element_rect(fill = 'khaki'),
panel.grid.major = element_line(colour = "burlywood", size=1.5),
panel.grid.minor = element_line(colour = "tomato",
size=.25,
linetype = "dashed"),
panel.border = element_blank(),
axis.line.x = element_line(colour = "darkorange",
size=1.5,
lineend = "butt"),
axis.line.y = element_line(colour = "darkorange",
size=1.5))
ggplot(data = df_corr, aes(x = time_ndi0 , y = time_ndi104)) +
geom_point(size = 4) + geom_smooth(method=lm, se = F, size = 1.5) +
#geom_text(x = 5, y = 80, label = lm_eqn(df_long, x = "hads_anx", y = "ndi"), parse = TRUE) +
xlab("NDI score baseline") + ylab("NDI score 2 years") + theme
theme <- theme(panel.background = element_black(),
panel.grid.major = element_line(colour = "burlywood", size=1.5),
panel.grid.minor = element_line(colour = "tomato",
size=.25,
linetype = "dashed"),
panel.border = element_blank(),
axis.line.x = element_line(colour = "darkorange",
size=1.5,
lineend = "butt"),
axis.line.y = element_line(colour = "darkorange",
size=1.5))
ggplot(data = df_corr, aes(x = time_ndi0 , y = time_ndi104)) +
geom_point(size = 4) + geom_smooth(method=lm, se = F, size = 1.5) +
#geom_text(x = 5, y = 80, label = lm_eqn(df_long, x = "hads_anx", y = "ndi"), parse = TRUE) +
xlab("NDI score baseline") + ylab("NDI score 2 years") + theme
theme <- theme(panel.background = element_black(),
panel.grid.major = element_line(colour = "gray", size=1.5),
panel.grid.minor = element_line(colour = "gray",
size=.25,
linetype = "dashed"),
panel.border = element_blank(),
axis.line.x = element_line(colour = "darkorange",
size=1.5,
lineend = "butt"),
axis.line.y = element_line(colour = "darkorange",
size=1.5))
ggplot(data = df_corr, aes(x = time_ndi0 , y = time_ndi104)) +
geom_point(size = 4) + geom_smooth(method=lm, se = F, size = 1.5) +
#geom_text(x = 5, y = 80, label = lm_eqn(df_long, x = "hads_anx", y = "ndi"), parse = TRUE) +
xlab("NDI score baseline") + ylab("NDI score 2 years") + theme
theme <- theme(panel.background = element_black(),
panel.grid.major = element_line(colour = "grey", size=1.5),
panel.grid.minor = element_line(colour = "grey",
size=.25,
linetype = "dashed"),
panel.border = element_blank(),
axis.line.x = element_line(colour = "black",
size=1.5,
lineend = "butt"),
axis.line.y = element_line(colour = "black",
size=1.5))
ggplot(data = df_corr, aes(x = time_ndi0 , y = time_ndi104)) +
geom_point(size = 4) + geom_smooth(method=lm, se = F, size = 1.5) +
#geom_text(x = 5, y = 80, label = lm_eqn(df_long, x = "hads_anx", y = "ndi"), parse = TRUE) +
xlab("NDI score baseline") + ylab("NDI score 2 years") + theme
theme <- theme(panel.background = element_blank(),
panel.grid.major = element_line(colour = "grey", size=1.5),
panel.grid.minor = element_line(colour = "grey",
size=.25,
linetype = "dashed"),
panel.border = element_blank(),
axis.line.x = element_line(colour = "black",
size=1.5,
lineend = "butt"),
axis.line.y = element_line(colour = "black",
size=1.5))
ggplot(data = df_corr, aes(x = time_ndi0 , y = time_ndi104)) +
geom_point(size = 4) + geom_smooth(method=lm, se = F, size = 1.5) +
#geom_text(x = 5, y = 80, label = lm_eqn(df_long, x = "hads_anx", y = "ndi"), parse = TRUE) +
xlab("NDI score baseline") + ylab("NDI score 2 years") + theme
theme <- theme(panel.background = element_blank(),
panel.grid.major = element_line(colour = "grey", size=1.5),
panel.grid.minor = element_line(colour = "grey",
size=.25,
linetype = "dashed"),
panel.border = element_blank(),
axis.line.x = element_line(colour = "black",
size=0.5,
lineend = "butt"),
axis.line.y = element_line(colour = "black",
size=0.5))
ggplot(data = df_corr, aes(x = time_ndi0 , y = time_ndi104)) +
geom_point(size = 4) + geom_smooth(method=lm, se = F, size = 1.5) +
#geom_text(x = 5, y = 80, label = lm_eqn(df_long, x = "hads_anx", y = "ndi"), parse = TRUE) +
xlab("NDI score baseline") + ylab("NDI score 2 years") + theme
theme <- theme(panel.background = element_blank(),
panel.grid.major = element_line(colour = "darkgrey", size=0.5),
panel.grid.minor = element_line(colour = "grey",
size=.25,
linetype = "dashed"),
panel.border = element_blank(),
axis.line.x = element_line(colour = "black",
size=0.5,
lineend = "butt"),
axis.line.y = element_line(colour = "black",
size=0.5))
ggplot(data = df_corr, aes(x = time_ndi0 , y = time_ndi104)) +
geom_point(size = 4) + geom_smooth(method=lm, se = F, size = 1.5) +
#geom_text(x = 5, y = 80, label = lm_eqn(df_long, x = "hads_anx", y = "ndi"), parse = TRUE) +
xlab("NDI score baseline") + ylab("NDI score 2 years") + theme
theme <- theme(panel.background = element_blank(),
panel.grid.major = element_line(colour = "darkgrey", size=0.5),
panel.grid.minor = element_line(colour = "grey",
size=.25,
linetype = "dashed"),
panel.border = element_blank(),
axis.line.x = element_line(colour = "black",
size=0.5,
lineend = "butt"),
axis.line.y = element_line(colour = "black",
size=0.5),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
ggplot(data = df_corr, aes(x = time_ndi0 , y = time_ndi104)) +
geom_point(size = 4) + geom_smooth(method=lm, se = F, size = 1.5) +
#geom_text(x = 5, y = 80, label = lm_eqn(df_long, x = "hads_anx", y = "ndi"), parse = TRUE) +
xlab("NDI score baseline") + ylab("NDI score 2 years") + theme
p1 <- ggplot(data = df_corr, aes(x = time_ndi0 , y = time_ndi52)) +
geom_point(size = 4) + geom_smooth(method=lm, se = F, size = 1.5) +
#geom_text(x = 5, y = 80, label = lm_eqn(df_long, x = "hads_anx", y = "ndi"), parse = TRUE) +
xlab("NDI score baseline") + ylab("NDI score after 1 years") + theme
p2 <- ggplot(data = df_corr, aes(x = time_ndi0 , y = time_ndi104)) +
geom_point(size = 4) + geom_smooth(method=lm, se = F, size = 1.5) +
#geom_text(x = 5, y = 80, label = lm_eqn(df_long, x = "hads_anx", y = "ndi"), parse = TRUE) +
xlab("NDI score baseline") + ylab("NDI score after 2 years") + theme
grid.arrange(p1, p2, nrow=1)
library(gridExtra)
p1 <- ggplot(data = df_corr, aes(x = time_ndi0 , y = time_ndi52)) +
geom_point(size = 4) + geom_smooth(method=lm, se = F, size = 1.5) +
#geom_text(x = 5, y = 80, label = lm_eqn(df_long, x = "hads_anx", y = "ndi"), parse = TRUE) +
xlab("NDI score baseline") + ylab("NDI score after 1 years") + theme
p2 <- ggplot(data = df_corr, aes(x = time_ndi0 , y = time_ndi104)) +
geom_point(size = 4) + geom_smooth(method=lm, se = F, size = 1.5) +
#geom_text(x = 5, y = 80, label = lm_eqn(df_long, x = "hads_anx", y = "ndi"), parse = TRUE) +
xlab("NDI score baseline") + ylab("NDI score after 2 years") + theme
cor.test(df_corr$time_ndi0, df_corr$time_ndi52)
cor.test(df_corr$time_ndi0, df_corr$time_ndi104)
grid.arrange(p1, p2, nrow=1)
p1p2 <- grid.arrange(p1, p2, nrow=1)
png("Figures/Corr_NDI.png",width = 15, height = 7, units='in',res=600)
plot(p1p2)
dev.off()
png("Figures/Corr_NDI.png",width = 15, height = 7, units='in',res=300)
plot(p1p2)
dev.off()
#model_final <- nlme::lme(ndi ~ time + hads_tot, random = ~1|id, method= "REML", data = df_long)
model_final <- nlme::lme(ndi ~ time_fct + hads_anx + hads_depr, method = "ML",
random = ~1|id, data = df_long)
xtable(summary(model_final))
final_mod_summ <- summary(model_final)
final_mod_summ$coefficients
final_mod_summ$modelStruct
final_mod_summ$contrasts
final_mod_summ$call
final_mod_summ <- coef(summary(model_final))
final_mod_summ$call
final_mod_summ
xtable(final_mod_summ)
library(xtable)
xtable(final_mod_summ)
random_effects <- VarCorr(model_final)
random_effects
print(random_effects,comp=c("Variance"))
79.54823 / (79.54823 + 88.6839)
rr1 <- ranef(model_final,  condVar = T)
ggCaterpillar(rr1, QQ = F, likeDotplot = T)
refgrid <-  ref_grid(model_final)
refgrid
df_emmeans <-  data.frame(summary(refgrid))
df_emmeans$time <- as.numeric(as.character(df_emmeans$time_fct))
df_emmeans$lwr <- df_emmeans$prediction - 1.96*df_emmeans$SE
df_emmeans$upr <- df_emmeans$prediction + 1.96*df_emmeans$SE
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() +
geom_line(col = "blue", size = 2) +
geom_point(data = df_long, aes(x = time, y = ndi, col = id, size = 0.1)) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) +
theme(legend.position = "none") + theme +
ggtitle("Estimated marginal mean of NDI over time") +
xlab("Predicted NDI") + theme
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() +
geom_line(col = "blue", size = 2) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) +
theme(legend.position = "none") + theme +
ggtitle("Estimated marginal mean of NDI over time") +
xlab("Time (weeks)") + theme
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() +
geom_line(col = "blue", size = 2) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) +
theme(legend.position = "none") + theme +
xlab("Time (weeks)") + theme
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() +
geom_line(col = "blue", size = 2) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) +
theme(legend.position = "none") +
ylab("NDI")
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() +
geom_line(col = "blue", size = 2) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) +
theme(legend.position = "none") +
ylab("NDI")  +
xlab("Time (weeks)") + theme
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() +
geom_line(col = "blue", size = 2) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) +
theme(legend.position = "none") +
ylab("NDI")  + ylim(c(0,50)) +
xlab("Time (weeks)") + theme
ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() +
geom_line(col = "blue", size = 2) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) +
theme(legend.position = "none") +
ylab("NDI")  +
xlab("Time (weeks)") + theme
p3 <- (data = df_emmeans, aes(x = time, y = prediction )) + geom_point() +
geom_line(col = "blue", size = 2) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) +
theme(legend.position = "none") +
ylab("NDI")  +
xlab("Time (weeks)") + theme
p3 <- ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() +
geom_line(col = "blue", size = 2) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) +
theme(legend.position = "none") +
ylab("NDI")  +
xlab("Time (weeks)") + theme
plot(p3)
png("Figures/Marginal_NDI.png",width = 15, height = 7, units='in',res=300)
plot(p3)
dev.off()
p3 <- ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() +
geom_line(col = "blue", size = 2) +
geom_point() +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) +
theme(legend.position = "none") +
ylab("NDI")  +
xlab("Time (weeks)") + theme
plot(p3)
p3 <- ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() +
geom_line(col = "blue", size = 2) +
geom_point(col = "blue", size = 2) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) +
theme(legend.position = "none") +
ylab("NDI")  +
xlab("Time (weeks)") + theme
plot(p3)
p3 <- ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() +
geom_line(col = "blue", size = 2) +
geom_point(col = "blue", size = 3) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) +
theme(legend.position = "none") +
ylab("NDI")  +
xlab("Time (weeks)") + theme
plot(p3)
p3 <- ggplot(data = df_emmeans, aes(x = time, y = prediction )) + geom_point() +
geom_line(col = "blue", size = 2) +
geom_point(col = "blue", size = 4) +
geom_ribbon(data=df_emmeans, aes(ymin= lwr, ymax= upr), alpha=0.3) +
theme(legend.position = "none") +
ylab("NDI")  +
xlab("Time (weeks)") + theme
png("Figures/Marginal_NDI.png",width = 15, height = 7, units='in',res=300)
plot(p3)
dev.off()
plot(p3)
