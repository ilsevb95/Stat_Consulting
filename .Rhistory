}
loss <- numeric(K)
for (k in 1:K){
training <- df_prediction[fold.index!=k, ]
validation <- df_prediction[fold.index==k, ]
lmer(ndi1_2 ~ ndi0 + hads0 + time_fct + (1|id), data = df_prediction, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response')
loss[k] <- Loss(validation$ndi1_2, validation.predict)
}
# Create Loss function
Loss <- function(x, y){
sum((x-y)^2)/length(x)
}
loss <- numeric(K)
for (k in 1:K){
training <- df_prediction[fold.index!=k, ]
validation <- df_prediction[fold.index==k, ]
training.fit <- lmer(ndi1_2 ~ ndi0 + hads0 + time_fct + (1|id),
data = df_prediction, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response')
loss[k] <- Loss(validation$ndi1_2, validation.predict)
}
mean(loss)
loss
validation.predict
validation$ndi1_2
validation.predict <- round(validation.predict, digits = 0)
validation.predict
validation$ndi1_2
Loss(validation$ndi1_2, validation.predict)
# Create folds
K <- 5
index <- rep(1:K, floor(nrow(df_prediction)/K)+1)[1:nrow(df_prediction)]
fold.index <- sample(index)
# Create Loss function
Loss <- function(x, y){
sum((x-y)^2)/length(x)
}
loss <- numeric(K)
for (k in 1:K){
training <- df_prediction[fold.index!=k, ]
validation <- df_prediction[fold.index==k, ]
training.fit <- lmer(ndi1_2 ~ ndi0 + hads0 + time_fct + (1|id),
data = df_prediction, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response')
validation.predict <- round(validation.predict, digits = 0)
loss[k] <- Loss(validation$ndi1_2, validation.predict)
}
mean(loss)
# Create Loss function: Root Mean Squard Error
Loss <- function(x, y){
mse <- sum((x-y)^2)/length(x)
rmse <- sqrt(mse)
return(rmse)
}
loss <- numeric(K)
for (k in 1:K){
training <- df_prediction[fold.index!=k, ]
validation <- df_prediction[fold.index==k, ]
training.fit <- lmer(ndi1_2 ~ ndi0 + hads0 + time_fct + (1|id),
data = df_prediction, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response')
validation.predict <- round(validation.predict, digits = 0)
loss[k] <- Loss(validation$ndi1_2, validation.predict)
}
mean(loss)
loss
# Create Loss function: Root Mean Squard Error
Loss <- function(x, y){
mse <- sum((x-y)^2)/length(x)
rmse <- sqrt(mse)
return(rmse)
}
loss <- numeric(K)
for (k in 1:K){
training <- df_prediction[fold.index!=k, ]
validation <- df_prediction[fold.index==k, ]
training.fit <- lmer(ndi1_2 ~ ndi0 + hads0 + time_fct + (1|id),
data = df_prediction, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response')
#validation.predict <- round(validation.predict, digits = 0)
loss[k] <- Loss(validation$ndi1_2, validation.predict)
}
loss
mean(loss)
fold.index
summary(fold.index)
count(fold.index)
(validation$ndi1_2 - validation.predict
)
loss
mean(loss)
1:nrow(df_prediction)
View(df_long)
summary(df_long$ndi)
shiny::runApp()
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
shiny::runApp()
runApp()
runApp('r_shiny')
runApp('r_shiny')
runApp('r_shiny')
rm(list = ls())
library(ggplot2)
library(lme4)
library(tidyverse)
library(nlme)
library(emmeans)
library(car)
library(lattice)
ggCaterpillar <- function(re, QQ=TRUE, likeDotplot=TRUE) {
require(ggplot2)
f <- function(x) {
pv   <- attr(x, "postVar")
cols <- 1:(dim(pv)[1])
se   <- unlist(lapply(cols, function(i) sqrt(pv[i, i, ])))
ord  <- unlist(lapply(x, order)) + rep((0:(ncol(x) - 1)) * nrow(x), each=nrow(x))
pDf  <- data.frame(y=unlist(x)[ord],
ci=1.96*se[ord],
nQQ=rep(qnorm(ppoints(nrow(x))), ncol(x)),
ID=factor(rep(rownames(x), ncol(x))[ord], levels=rownames(x)[ord]),
ind=gl(ncol(x), nrow(x), labels=names(x)))
if(QQ) {  ## normal QQ-plot
p <- ggplot(pDf, aes(nQQ, y))
p <- p + facet_wrap(~ ind, scales="free")
p <- p + xlab("Standard normal quantiles") + ylab("Random effect quantiles")
} else {  ## caterpillar dotplot
p <- ggplot(pDf, aes(ID, y)) + coord_flip()
if(likeDotplot) {  ## imitate dotplot() -> same scales for random effects
p <- p + facet_wrap(~ ind)
} else {           ## different scales for random effects
p <- p + facet_grid(ind ~ ., scales="free_y")
}
p <- p + xlab("Levels") + ylab("Random effects")
}
p <- p + theme(legend.position="none")
p <- p + geom_hline(yintercept=0)
p <- p + geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=0, colour="black")
p <- p + geom_point(aes(size=1.2), colour="blue")
return(p)
}
lapply(re, f)
}
theme <-  theme(#panel.background = element_rect(fill = "lightgrey", colour = "white", size = 4),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
df_long <- read.csv("Data/data_final_2019-11-05.csv", sep = ",")
df_long <- df_long %>%
mutate(hads_tot = hads_depr + hads_anx) %>%
select(id, ndi, time, hads_tot) %>%
mutate(ndi = as.numeric(ndi), time = as.numeric(time),
hads_tot = as.numeric(hads_tot), time_fct = as.factor(time))
df_corr <- df_long %>%
select(id, time, ndi) %>%
#gather(variable, value, -c(ndi:hads_depr)) %>%
#unite(temp, student, variable) %>%
#spread(temp, value)
spread(key = time, value = ndi, sep = "_ndi")
df_corr2 <- df_long %>%
select(id, time, hads_tot) %>%
#gather(variable, value, -c(ndi:hads_depr)) %>%
#unite(temp, student, variable) %>%
#spread(temp, value)
spread(key = time, value = hads_tot, sep = "_hads")
df_corr <- left_join(df_corr, df_corr2, "id")
ggplot(data = df_corr, aes(x = time_ndi0 , y = time_ndi104)) +
geom_point(size = 4) + geom_smooth(method=lm, se = F, size = 1.5) +
#geom_text(x = 5, y = 80, label = lm_eqn(df_long, x = "hads_anx", y = "ndi"), parse = TRUE) +
xlab("NDI score baseline") + ylab("NDI score 2 years")
model1 <- nlme::lme(ndi ~ time, random = ~1|id, method= "ML", data = df_long)
model2 <- nlme::lme(ndi ~ time + hads_tot, random = ~1|id, method= "ML", data = df_long)
model3 <- nlme::lme(ndi ~ time + hads_tot + time:hads_tot, random = ~1|id, method= "ML", data = df_long)
model4 <- nlme::lme(ndi ~ time + hads_tot + hads_tot:time, random = ~1|id, method= "ML", data = df_long)
anova(model1, model2)
anova(model2, model3)
getVarCov(model2, individuals = 2, type = "conditional")
# Homogeneity of variance
plot(resid(model2))
# Normally distributed residuals
qqPlot(resid(model2))
# Homogeneity of variance
plot(resid(model2))
# Normally distributed residuals
qqPlot(resid(model2))
df_long[c(34, 289), ]
# Influencial points
infl2 = influence(model2, obs = T)
cooksd = cooks.distance(infl2) # two outliers,
plot(cooksd, pch="*", cex=2, main="Influential Obs by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cooksd, na.rm=T), col="red")  # add cutoff line
text(x = 1:length(cooksd) , y=cooksd, labels=ifelse(cooksd> 4*mean(cooksd, na.rm = T),
1:length(cooksd),""), col="blue", pos =2)
df_long[c(251, 34, 162, 29), ]
#model_final <- nlme::lme(ndi ~ time + hads_tot, random = ~1|id, method= "REML", data = df_long)
model_final <- lme4::lmer(ndi ~ time_fct + hads_tot + (1|id), REML= T, data = df_long)
summary(model_final)
# Calculate the intra class correlation:
# Model explains only 46.9 % of variance
83.300 / ( 83.300 +  94.349)
rr1 <- ranef(model_final,  condVar = T)
ggCaterpillar(rr1, QQ = F, likeDotplot = T)
set.seed(19950306)
# Load libraries
rm(list = ls())
library(ggplot2)
library(lme4)
library(tidyverse)
library(nlme)
library(emmeans)
library(car)
library(lattice)
theme <-  theme(#panel.background = element_rect(fill = "lightgrey", colour = "white", size = 4),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
df_long <- read.csv("Data/data_final_2019-11-05.csv", sep = ",")
# Some data wrangling
df_long <- df_long %>%
mutate(hads_tot = hads_depr + hads_anx) %>%
select(id, ndi, time, hads_tot) %>%
mutate(ndi = as.numeric(ndi), time = as.numeric(time),
hads_tot = as.numeric(hads_tot), time_fct = as.factor(time))
# Create new dataframe with HADS at time = 0 & NDI at time = 0
df_time0 <- df_long[df_long$time == 0, ]
df_time0 <- select(df_time0, id, ndi, hads_tot)
colnames(df_time0) <-  c("id", "ndi0", "hads0")
# Create new dataframe with HADS and NDI at 52 and 104 weeks
df_time1_2 <- df_long[df_long$time != 0, ]
df_time1_2 <- select(df_time1_2, id, ndi, time_fct)
colnames(df_time1_2) <-  c("id", "ndi1_2", "time_fct")
# Merge dataframes
df_prediction <- merge(df_time1_2, df_time0, by = "id")
# Prediction Model
We fit the following prediction model. It turns out that Time is not significant, therefore we remove this variable. Note that the models below are fitting with Maximum Likelihood (ML)
model_pred1 <- lmer(ndi1_2 ~ ndi0 + hads0 + time_fct + (1|id), data = df_prediction, REML = F)
model_pred2 <- lmer(ndi1_2 ~ ndi0 + hads0 + (1|id), data = df_prediction, REML = F)
summary(model_pred1)
model_final <- lmer(ndi1_2 ~ ndi0 + hads0 + time_fct + (1|id), data = df_prediction, REML = T)
# Create folds
K <- 5
index <- rep(1:K, floor(nrow(df_prediction)/K)+1)[1:nrow(df_prediction)]
fold.index <- sample(index)
# Create Loss function: Root Mean Squard Error
Loss <- function(x, y){
mse <- sum((x-y)^2)/length(x)
rmse <- sqrt(mse)
return(rmse)
}
loss <- numeric(K)
for (k in 1:K){
training <- df_prediction[fold.index!=k, ]
validation <- df_prediction[fold.index==k, ]
training.fit <- lmer(ndi1_2 ~ ndi0 + hads0 + time_fct + (1|id),
data = df_prediction, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response')
#validation.predict <- round(validation.predict, digits = 0)
loss[k] <- Loss(validation$ndi1_2, validation.predict)
}
loss
mean(loss)
rm(list = ls())
library(ggplot2)
library(lme4)
library(tidyverse)
library(nlme)
library(emmeans)
library(car)
library(lattice)
ggCaterpillar <- function(re, QQ=TRUE, likeDotplot=TRUE) {
require(ggplot2)
f <- function(x) {
pv   <- attr(x, "postVar")
cols <- 1:(dim(pv)[1])
se   <- unlist(lapply(cols, function(i) sqrt(pv[i, i, ])))
ord  <- unlist(lapply(x, order)) + rep((0:(ncol(x) - 1)) * nrow(x), each=nrow(x))
pDf  <- data.frame(y=unlist(x)[ord],
ci=1.96*se[ord],
nQQ=rep(qnorm(ppoints(nrow(x))), ncol(x)),
ID=factor(rep(rownames(x), ncol(x))[ord], levels=rownames(x)[ord]),
ind=gl(ncol(x), nrow(x), labels=names(x)))
if(QQ) {  ## normal QQ-plot
p <- ggplot(pDf, aes(nQQ, y))
p <- p + facet_wrap(~ ind, scales="free")
p <- p + xlab("Standard normal quantiles") + ylab("Random effect quantiles")
} else {  ## caterpillar dotplot
p <- ggplot(pDf, aes(ID, y)) + coord_flip()
if(likeDotplot) {  ## imitate dotplot() -> same scales for random effects
p <- p + facet_wrap(~ ind)
} else {           ## different scales for random effects
p <- p + facet_grid(ind ~ ., scales="free_y")
}
p <- p + xlab("Levels") + ylab("Random effects")
}
p <- p + theme(legend.position="none")
p <- p + geom_hline(yintercept=0)
p <- p + geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=0, colour="black")
p <- p + geom_point(aes(size=1.2), colour="blue")
return(p)
}
lapply(re, f)
}
theme <-  theme(#panel.background = element_rect(fill = "lightgrey", colour = "white", size = 4),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15),
legend.title = element_blank())
df_long <- read.csv("Data/data_final_2019-11-05.csv", sep = ",")
df_long <- df_long %>%
mutate(hads_tot = hads_depr + hads_anx) %>%
select(id, ndi, time, hads_tot, hads_anx, hads_depr ) %>%
mutate(ndi = as.numeric(ndi), time = as.numeric(time),
hads_tot = as.numeric(hads_tot), time_fct = as.factor(time))
model1 <- nlme::lme(ndi ~ time, random = ~1|id, method= "ML", data = df_long)
model2 <- nlme::lme(ndi ~ time + hads_tot, random = ~1|id, method= "ML", data = df_long)
model3 <- nlme::lme(ndi ~ time + hads_tot + time:hads_tot, random = ~1|id, method= "ML", data = df_long)
model4 <- nlme::lme(ndi ~ time + hads_anx + hads_depr, random = ~1|id, method= "ML", data = df_long)
summary(model4)
model4 <- nlme::lme(ndi ~ time  + hads_depr, random = ~1|id, method= "ML",
data = df_long)
model5 <- nlme::lme(ndi ~ time + hads_anx + hads_depr, random = ~1|id, method= "ML",
data = df_long)
anova(model4, model5)
cor.test(df_long$hads_anx, df_long$hads_depr)
rm(list = ls())
library(haven)
library(tidyverse)
library(gganimate)
library(tidyverse)
library(gridExtra)
data <- read_sav("Data/Dataset NECK HADS stuk 12-08-2019 long.sav")
# Visualization set-up
theme <-  theme(#panel.background = element_rect(fill = "lightgrey", colour = "white", size = 4),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15))
data %>%
select(id, time, NDI.Som.GOED) %>%
filter_all(any_vars(is.na(.))) %>%
print(n = Inf)
data %>%
select(PATIENTID, PMOMENTX, NDI.Som.GOED) %>%
filter_all(any_vars(is.na(.))) %>%
print(n = Inf)
data %>%
select(PATIENTID, PMOMENTX, NDI.Som.GOED, HADSDEPR, HADSANGS) %>%
filter_all(any_vars(is.na(.))) %>%
print(n = Inf)
data_missing <- data %>%
select(PATIENTID, PMOMENTX, NDI.Som.GOED, HADSDEPR, HADSANGS) %>%
filter_all(any_vars(is.na(.))) %>%
print(n = Inf)
data <- read_sav("Data/Dataset NECK HADS stuk 12-08-2019 long.sav")
# Visualization set-up
theme <-  theme(#panel.background = element_rect(fill = "lightgrey", colour = "white", size = 4),
axis.text=element_text(size=15),
axis.title=element_text(size=22),
plot.title = element_text(size = 22),
strip.text = element_text(size = 15))
data_missing <- data %>%
select(PATIENTID, PMOMENTX, NDI.Som.GOED, HADSDEPR, HADSANGS) %>%
filter_all(any_vars(is.na(.))) %>%
print(n = Inf)
```{r, results='hide'}
#### Cleaning data ####
df_all <- data %>%
dplyr::select(PATIENTID, OPERATIE, PMOMENTX, NDI.Som.GOED, HADSDEPR, HADSANGS, Baseline_HADSANG_Group,
Baseline_HADSDEPR_Group) %>%
rename(id = PATIENTID, surgery = OPERATIE, time = PMOMENTX, ndi = NDI.Som.GOED,
hads_depr = HADSDEPR, hads_anx = HADSANGS, baseline_anx = Baseline_HADSANG_Group,
baseline_depr = Baseline_HADSDEPR_Group)
# One patients has NAs. Manually replace these
df_all %>%
filter(id == "L8103004")
df_all <- df_all %>%
mutate(baseline_depr = ifelse(df_all$id == "L8103004" & df_all$time != 0, 1, NA)) %>%
mutate(baseline_anx = ifelse(df_all$id == "L8103004" & df_all$time != 0, 1, NA))
df_all %>%
filter(id == "L8103004")
# Change to factors and create variables with the label names
df_all$id <- as.factor(df_all$id)
#df_all$di_depr <- as.factor(df_all$di_depr)
df_all$surgery <- as.factor(df_all$surgery)
df_all$baseline_depr <- as.factor(df_all$baseline_depr)
df_all$baseline_anx <- as.factor(df_all$baseline_anx)
df_all$surgery_labels <- df_all$surgery
levels(df_all$surgery_labels) <- c("ACD", "ACDF", "ACDA")
df_all$baseline_depr_labels <- df_all$baseline_depr
levels(df_all$baseline_depr_labels) <- c("non", "doubtful", "cases")
df_all$baseline_anx_labels <- df_all$baseline_anx
levels(df_all$baseline_anx_labels) <- c("non", "doubtful", "cases")
df_week104 <- df_all[df_all$time == 104,]
df_week104$week104_depr <- ifelse(df_week104$hads_depr <= 7, 1,
ifelse(df_week104$hads_depr >= 11, 3, 2))
df_week104$week104_anx <- ifelse(df_week104$hads_anx <= 7, 1,
ifelse(df_week104$hads_anx >= 11, 3, 2))
df_week104 <- df_week104 %>%
dplyr::select(id, time, hads_depr, hads_anx, week104_depr, week104_anx) %>%
mutate(week104_depr_labels = recode(week104_depr, "non", "doubtful", "cases")) %>%
mutate(week104_anx_labels = recode(week104_anx, "non", "doubtful", "cases"))
df_long <- left_join(df_all, df_week104, by = c("id",  "time", "hads_anx", "hads_depr"))
df_profiles <- df_long %>%
dplyr::select(id, time, baseline_depr, baseline_anx, baseline_depr_labels, baseline_anx_labels,
week104_depr, week104_anx, week104_depr_labels, week104_anx_labels) %>%
filter(time == 104) %>%
drop_na() %>%
mutate(profile_depr = paste(baseline_depr, week104_depr, sep = " -")) %>%
mutate(profile_anx = paste(baseline_anx, week104_anx, sep = " - ")) %>%
mutate(profile_depr_labels = paste(baseline_depr_labels, week104_depr_labels, sep = " - ")) %>%
mutate(profile_anx_labels = paste(baseline_anx_labels, week104_anx_labels, sep = " - ")) %>%
dplyr::select(id, profile_depr, profile_anx, profile_anx_labels, profile_depr_labels)
# Copy this dataframe 3 times.
df_profiles2x <- rbind(df_profiles, df_profiles)
df_profiles <- rbind(df_profiles2x, df_profiles)
df_long <- df_long %>%
left_join(df_profiles, by = "id") %>%
distinct()
df_long_missing <- df_long %>%
dplyr::select(id, time, ndi, hads_anx, hads_depr) %>%
filter_all(any_vars(is.na(.))) %>%
print(n = Inf)
#### Cleaning data ####
df_all <- data %>%
dplyr::select(PATIENTID, OPERATIE, PMOMENTX, NDI.Som.GOED, HADSDEPR, HADSANGS, Baseline_HADSANG_Group,
Baseline_HADSDEPR_Group) %>%
rename(id = PATIENTID, surgery = OPERATIE, time = PMOMENTX, ndi = NDI.Som.GOED,
hads_depr = HADSDEPR, hads_anx = HADSANGS, baseline_anx = Baseline_HADSANG_Group,
baseline_depr = Baseline_HADSDEPR_Group)
# One patients has NAs. Manually replace these
df_all %>%
filter(id == "L8103004")
df_all <- df_all %>%
mutate(baseline_depr = ifelse(df_all$id == "L8103004" & df_all$time != 0, 1, NA)) %>%
mutate(baseline_anx = ifelse(df_all$id == "L8103004" & df_all$time != 0, 1, NA))
df_all %>%
filter(id == "L8103004")
# Change to factors and create variables with the label names
df_all$id <- as.factor(df_all$id)
#df_all$di_depr <- as.factor(df_all$di_depr)
df_all$surgery <- as.factor(df_all$surgery)
df_all$baseline_depr <- as.factor(df_all$baseline_depr)
df_all$baseline_anx <- as.factor(df_all$baseline_anx)
df_all$surgery_labels <- df_all$surgery
levels(df_all$surgery_labels) <- c("ACD", "ACDF", "ACDA")
df_all$baseline_depr_labels <- df_all$baseline_depr
levels(df_all$baseline_depr_labels) <- c("non", "doubtful", "cases")
df_all$baseline_anx_labels <- df_all$baseline_anx
levels(df_all$baseline_anx_labels) <- c("non", "doubtful", "cases")
df_week104 <- df_all[df_all$time == 104,]
df_week104$week104_depr <- ifelse(df_week104$hads_depr <= 7, 1,
ifelse(df_week104$hads_depr >= 11, 3, 2))
df_week104$week104_anx <- ifelse(df_week104$hads_anx <= 7, 1,
ifelse(df_week104$hads_anx >= 11, 3, 2))
df_week104 <- df_week104 %>%
dplyr::select(id, time, hads_depr, hads_anx, week104_depr, week104_anx) %>%
mutate(week104_depr_labels = recode(week104_depr, "non", "doubtful", "cases")) %>%
mutate(week104_anx_labels = recode(week104_anx, "non", "doubtful", "cases"))
df_week104 <- df_all[df_all$time == 104,]
df_week104$week104_depr <- ifelse(df_week104$hads_depr <= 7, 1,
ifelse(df_week104$hads_depr >= 11, 3, 2))
df_week104$week104_anx <- ifelse(df_week104$hads_anx <= 7, 1,
ifelse(df_week104$hads_anx >= 11, 3, 2))
df_week104 <- df_week104 %>%
dplyr::select(id, time, hads_depr, hads_anx, week104_depr, week104_anx) %>%
mutate(week104_depr_labels = recode(week104_depr, "non", "doubtful", "cases")) %>%
mutate(week104_anx_labels = recode(week104_anx, "non", "doubtful", "cases"))
df_week104 <- df_week104 %>%
dplyr::select(id, time, hads_depr, hads_anx, week104_depr, week104_anx) %>%
mutate(week104_depr_labels = dplyr::recode(week104_depr, "non", "doubtful", "cases")) %>%
mutate(week104_anx_labels = dplyr::recode(week104_anx, "non", "doubtful", "cases"))
df_week104 <- df_week104 %>%
dplyr::select(id, time, hads_depr, hads_anx, week104_depr, week104_anx) %>%
mutate(week104_depr_labels = dplyr::recode(week104_depr, "non", "doubtful", "cases")) %>%
mutate(week104_anx_labels = dplyr::recode(week104_anx, "non", "doubtful", "cases"))
df_week104 <- df_all[df_all$time == 104,]
df_week104$week104_depr <- ifelse(df_week104$hads_depr <= 7, 1,
ifelse(df_week104$hads_depr >= 11, 3, 2))
df_week104$week104_anx <- ifelse(df_week104$hads_anx <= 7, 1,
ifelse(df_week104$hads_anx >= 11, 3, 2))
df_week104 <- df_week104 %>%
dplyr::select(id, time, hads_depr, hads_anx, week104_depr, week104_anx) %>%
mutate(week104_depr_labels = dplyr::recode(week104_depr, "non", "doubtful", "cases")) %>%
mutate(week104_anx_labels = dplyr::recode(week104_anx, "non", "doubtful", "cases"))
df_long <- left_join(df_all, df_week104, by = c("id",  "time", "hads_anx", "hads_depr"))
# remove nas
df_long_no_na <- df_long %>%
drop_na(ndi, hads_anx, hads_depr)
# check if no patient is removed
setdiff(data$PATIENTID, df_long$id)
df_long_missing <- df_long %>%
dplyr::select(id, time, ndi, hads_anx, hads_depr) %>%
filter_all(any_vars(is.na(.))) %>%
print(n = Inf)
all.equal(df_long_missing, data_missing)
all.equal(df_long_missing$id, data_missing$PATIENTID)
df_long_missing$id
data_missing$PATIENTID
data_missing$PATIENTID <- as.factor(data_missing)
all.equal(df_long_missing$id, data_missing$PATIENTID)
data_missing$PATIENTID <- as.factor(data_missing$PATIENTID)
all.equal(df_long_missing$id, data_missing$PATIENTID)
setdiff(df_long_missing$id, data_missing$PATIENTID)
