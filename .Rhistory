}
if(QQ) {  ## normal QQ-plot
p <- ggplot(pDf, aes(nQQ, y))
p <- p + facet_wrap(~ ind, scales="free")
p <- p + xlab("Standard normal quantiles") + ylab("Random effect quantiles")
} else {  ## caterpillar dotplot
p <- ggplot(pDf, aes(ID, y)) + coord_flip()
if(likeDotplot) {  ## imitate dotplot() -> same scales for random effects
p <- p + facet_wrap(~ ind)
} else {           ## different scales for random effects
p <- p + facet_grid(ind ~ ., scales="free_y")
}
p <- p + xlab("Levels") + ylab("Random effects")
}
p <- p + theme(legend.position="none")
p <- p + geom_hline(yintercept=0)
p <- p + geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=0, colour="black")
p <- p + geom_point(aes(size=1.2), colour="blue")
return(p)
}
lapply(re, f)
}
ggCaterpillar(ranef(model_final2,condVar=TRUE))
model_final3 <- lmer(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + time_fct + (1|id),
data = df_prediction,REML = T)
ggCaterpillar(ranef(model_final3,condVar=TRUE))
ggCaterpillar(ranef(model_final3,condVar=TRUE, QQ=F))
ggCaterpillar(ranef(model_final3,condVar=TRUE),QQ=FALSE, likeDotplot=TRUE)
model_final3 <- lmer(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + time_fct + (1|id) + (0+time_fct|id),
data = df_prediction,REML = T)
model_final3
model_final3 <- lmer(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + time_fct + (1|id) + (0+time_fct|id),
data = df_prediction,REML = F)
plot(sort(df_ranef[,1], df_ranef[,2])
)
df_ranef[order(df_ranef$`(Intercept)`),]
df_ranef <- df_ranef[order(df_ranef$`(Intercept)`),]
plot(df_ranef$`(Intercept)`, df_ranef$time_fct104)
# Set-up
rm(list = ls())
set.seed(19950306)
library(lme4)
library(tidyverse)
library(leaps)
library(glmnet)
library(lmmlasso)
library(lmmen)
library(MASS)
library(groupdata2)
df_pred <- read.csv("Data/df_prediction_new_2020-03-23.csv")
# 10 obs are removed due to missingness
df_pred <- df_pred %>%
dplyr::select(id, id_revalue, ndi1_2, time_fct, ndi0_cnt, hads0_tot_cnt, LENGTH) %>%
na.omit()
model_old <- nlme::lme(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + time_fct,
method = "ML",
random = ~1|id, data = df_pred)
model_new <- nlme::lme(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + time_fct + LENGTH,
method = "ML",
random = ~1|id, data = df_pred)
model_new2 <- nlme::lme(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + LENGTH,
method = "ML",
random = ~1|id, data = df_pred)
anova(model_old, model_new)
anova(model_new model_new2)
anova(model_new, model_new2)
anova(model_new, model_new2)
summary(model_new2)
# Add new column with folds numbers
K <- 5
df_pred <- fold(df_pred, k = K, id_col = "id_revalue") %>%
print(n=Inf)
# Create Loss function: Root Mean Squard Error
Loss <- function(x, y){
mse <- sum((x-y)^2)/length(x)
rmse <- sqrt(mse)
return(rmse)
}
loss <- numeric(K)
loss2 <- numeric(K)
list_pred <- c()
for (k in 1:K){
training <- df_pred[df_pred$.folds !=k, ]
validation <- df_pred[df_pred$.folds ==k, ]
training.fit <-  lme4::lmer(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + LENGTH + time_fct + (1|id),
data = training, REML = T)
training.fit2 <-  lme4::lmer(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + LENGTH + (1|id),
data = training, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response',
allow.new.levels = T)
validation.predict2 <- predict(training.fit2, newdata=validation, type='response',
allow.new.levels = T)
loss[k] <- Loss(validation$ndi1_2, validation.predict)
loss2[k] <- Loss(validation$ndi1_2, validation.predict2)
# Save predictions in list
#list_pred[[k]] <- validation %>%
#dplyr::select(id_revalue, id, ndi1_2, time_fct, .folds) %>%
# mutate(pred = validation.predict)
}
# Show RMSE + SD
loss; loss2
RMSE  <- round(mean(loss), digits = 3); RMSE2  <- round(mean(loss2), digits = 3)
RMSE; RMSE2
# Create Loss function: Root Mean Squard Error
Loss <- function(x, y){
mse <- sum((x-y)^2)/length(x)
rmse <- sqrt(mse)
return(rmse)
}
loss <- numeric(K)
loss2 <- numeric(K)
list_pred <- c()
list_pred2 <- c()
for (k in 1:K){
training <- df_pred[df_pred$.folds !=k, ]
validation <- df_pred[df_pred$.folds ==k, ]
training.fit <-  lme4::lmer(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + LENGTH + time_fct + (1|id),
data = training, REML = T)
training.fit2 <-  lme4::lmer(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + LENGTH + (1|id),
data = training, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response',
allow.new.levels = T)
validation.predict2 <- predict(training.fit2, newdata=validation, type='response',
allow.new.levels = T)
loss[k] <- Loss(validation$ndi1_2, validation.predict)
loss2[k] <- Loss(validation$ndi1_2, validation.predict2)
# Save predictions in list
list_pred[[k]] <- validation %>%
dplyr::select(id_revalue, id, ndi1_2, time_fct, .folds) %>%
mutate(pred = validation.predict)
list_pred2[[k]] <- validation2 %>%
dplyr::select(id_revalue, id, ndi1_2, time_fct, .folds) %>%
mutate(pred = validation.predict2)
}
loss <- numeric(K)
loss2 <- numeric(K)
list_pred <- c()
list_pred2 <- c()
for (k in 1:K){
training <- df_pred[df_pred$.folds !=k, ]
validation <- df_pred[df_pred$.folds ==k, ]
training.fit <-  lme4::lmer(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + LENGTH + time_fct + (1|id),
data = training, REML = T)
training.fit2 <-  lme4::lmer(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + LENGTH + (1|id),
data = training, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response',
allow.new.levels = T)
validation.predict2 <- predict(training.fit2, newdata=validation, type='response',
allow.new.levels = T)
loss[k] <- Loss(validation$ndi1_2, validation.predict)
loss2[k] <- Loss(validation$ndi1_2, validation.predict2)
# Save predictions in list
list_pred[[k]] <- validation %>%
dplyr::select(id_revalue, id, ndi1_2, time_fct, .folds) %>%
mutate(pred = validation.predict)
list_pred2[[k]] <- validation %>%
dplyr::select(id_revalue, id, ndi1_2, time_fct, .folds) %>%
mutate(pred = validation.predict2)
}
# Show RMSE + SD
loss; loss2
RMSE  <- round(mean(loss), digits = 3); RMSE2  <- round(mean(loss2), digits = 3)
RMSE; RMSE2
round(sd(loss), digits = 1)
df_cv <- do.call("rbind", list_pred)
df_cv52 <- df_cv %>%
filter(time_fct == 52)
df_cv104 <- df_cv %>%
filter(time_fct == 104)
# calculate rmse per time point
df_cv52 <- df_cv52 %>%
group_by(.folds) %>%
mutate(loss = Loss(ndi1_2, pred))
rmse_52 <- unique(df_cv52$loss)
round(mean(rmse_52), 1)
round(sd(rmse_52), 1)
round(mean(rmse_52), 3)
round(sd(rmse_52), 1)
df_cv104 <- df_cv104 %>%
group_by(.folds) %>%
mutate(loss = Loss(ndi1_2, pred))
rmse_104 <- unique(df_cv104$loss)
round(mean(rmse_104), 3)
round(sd(rmse_104), 1)
rmse_104
round(mean(rmse_104), 3)
round(sd(rmse_104), 2)
df_cv <- do.call("rbind", list_pred2)
df_cv52 <- df_cv %>%
filter(time_fct == 52)
df_cv104 <- df_cv %>%
filter(time_fct == 104)
# calculate rmse per time point
df_cv52 <- df_cv52 %>%
group_by(.folds) %>%
mutate(loss = Loss(ndi1_2, pred))
rmse_52_2 <- unique(df_cv52$loss)
round(mean(rmse_52), 3)
round(sd(rmse_52), 1)
df_cv104 <- df_cv104 %>%
group_by(.folds) %>%
mutate(loss = Loss(ndi1_2, pred))
rmse_104_2 <- unique(df_cv104$loss)
round(mean(rmse_104), 3)
round(sd(rmse_104), 2)
df_cv <- do.call("rbind", list_pred)
df_cv52 <- df_cv %>%
filter(time_fct == 52)
df_cv104 <- df_cv %>%
filter(time_fct == 104)
# calculate rmse per time point
df_cv52 <- df_cv52 %>%
group_by(.folds) %>%
mutate(loss = Loss(ndi1_2, pred))
rmse_52 <- unique(df_cv52$loss)
round(mean(rmse_52), 3)
round(sd(rmse_52), 1)
df_cv104 <- df_cv104 %>%
group_by(.folds) %>%
mutate(loss = Loss(ndi1_2, pred))
rmse_104 <- unique(df_cv104$loss)
round(mean(rmse_104), 3)
round(sd(rmse_104), 1)
df_cv <- do.call("rbind", list_pred2)
df_cv52 <- df_cv %>%
filter(time_fct == 52)
df_cv104 <- df_cv %>%
filter(time_fct == 104)
# calculate rmse per time point
df_cv52 <- df_cv52 %>%
group_by(.folds) %>%
mutate(loss = Loss(ndi1_2, pred))
rmse_52_2 <- unique(df_cv52$loss)
round(mean(rmse_52), 3)
round(sd(rmse_52), 2)
df_cv104 <- df_cv104 %>%
group_by(.folds) %>%
mutate(loss = Loss(ndi1_2, pred))
rmse_104_2 <- unique(df_cv104$loss)
round(mean(rmse_104), 3)
round(sd(rmse_104), 2)
round(mean(rmse_104_2), 3)
round(sd(rmse_104_2), 2)
round(mean(rmse_52_2), 3)
round(sd(rmse_52_2), 2)
rmse_104_2 <- unique(df_cv104$loss)
round(mean(rmse_104_2), 3)
df_cv <- do.call("rbind", list_pred2)
df_cv52 <- df_cv %>%
filter(time_fct == 52)
df_cv104 <- df_cv %>%
filter(time_fct == 104)
# calculate rmse per time point
df_cv52 <- df_cv52 %>%
group_by(.folds) %>%
mutate(loss = Loss(ndi1_2, pred))
rmse_52_2 <- unique(df_cv52$loss)
round(mean(rmse_52_2), 3)
round(sd(rmse_52_2), 2)
df_cv104 <- df_cv104 %>%
group_by(.folds) %>%
mutate(loss = Loss(ndi1_2, pred))
rmse_104_2 <- unique(df_cv104$loss)
round(mean(rmse_104_2), 3)
round(sd(rmse_104_2), 2)
df_cv <- do.call("rbind", list_pred)
df_cv52 <- df_cv %>%
filter(time_fct == 52)
df_cv104 <- df_cv %>%
filter(time_fct == 104)
# calculate rmse per time point
df_cv52 <- df_cv52 %>%
group_by(.folds) %>%
mutate(loss = Loss(ndi1_2, pred))
rmse_52 <- unique(df_cv52$loss)
round(mean(rmse_52), 3)
round(sd(rmse_52), 1)
df_cv104 <- df_cv104 %>%
group_by(.folds) %>%
mutate(loss = Loss(ndi1_2, pred))
rmse_104 <- unique(df_cv104$loss)
round(mean(rmse_104), 3)
round(sd(rmse_104), 1)
round(mean(rmse_104), 3)
round(sd(rmse_104), 1)
round(mean(rmse_52), 3)
round(sd(rmse_52), 1)
round(mean(rmse_104_2), 3)
round(sd(rmse_104_2), 2)
round(mean(rmse_52_2), 3)
round(sd(rmse_52_2), 2)
# Set-up
rm(list = ls())
set.seed(19950306)
library(lme4)
library(tidyverse)
library(leaps)
library(glmnet)
library(lmmlasso)
library(lmmen)
library(MASS)
library(groupdata2)
df_pred <- read.csv("Data/df_prediction_new_2020-03-23.csv")
# 10 obs are removed due to missingness
df_pred <- df_pred %>%
dplyr::select(id, id_revalue, ndi1_2, time_fct, ndi0_cnt, hads0_tot_cnt, LENGTH) %>%
na.omit()
model_old <- nlme::lme(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + time_fct,
method = "ML",
random = ~1|id, data = df_pred)
model_new <- nlme::lme(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + time_fct + LENGTH,
method = "ML",
random = ~1|id, data = df_pred)
model_new2 <- nlme::lme(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + LENGTH,
method = "ML",
random = ~1|id, data = df_pred)
# Add new column with folds numbers
K <- 5
df_pred <- fold(df_pred, k = K, id_col = "id_revalue") %>%
print(n=Inf)
# Create Loss function: Root Mean Squard Error
Loss <- function(x, y){
mse <- sum((x-y)^2)/length(x)
rmse <- sqrt(mse)
return(rmse)
}
loss <- numeric(K)
loss2 <- numeric(K)
list_pred <- c()
list_pred2 <- c()
for (k in 1:K){
training <- df_pred[df_pred$.folds !=k, ]
validation <- df_pred[df_pred$.folds ==k, ]
training.fit <-  lme4::lmer(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + LENGTH + time_fct + (1|id),
data = training, REML = T)
training.fit2 <-  lme4::lmer(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + time_fct + (1|id),
data = training, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response',
allow.new.levels = T)
validation.predict2 <- predict(training.fit2, newdata=validation, type='response',
allow.new.levels = T)
loss[k] <- Loss(validation$ndi1_2, validation.predict)
loss2[k] <- Loss(validation$ndi1_2, validation.predict2)
# Save predictions in list
list_pred[[k]] <- validation %>%
dplyr::select(id_revalue, id, ndi1_2, time_fct, .folds) %>%
mutate(pred = validation.predict)
list_pred2[[k]] <- validation %>%
dplyr::select(id_revalue, id, ndi1_2, time_fct, .folds) %>%
mutate(pred = validation.predict2)
}
# Show RMSE + SD
loss; loss2
RMSE  <- round(mean(loss), digits = 3); RMSE2  <- round(mean(loss2), digits = 3)
RMSE; RMSE2
df_cv <- do.call("rbind", list_pred)
df_cv52 <- df_cv %>%
filter(time_fct == 52)
df_cv104 <- df_cv %>%
filter(time_fct == 104)
# calculate rmse per time point
df_cv52 <- df_cv52 %>%
group_by(.folds) %>%
mutate(loss = Loss(ndi1_2, pred))
rmse_52 <- unique(df_cv52$loss)
round(mean(rmse_52), 3)
round(sd(rmse_52), 1)
df_cv104 <- df_cv104 %>%
group_by(.folds) %>%
mutate(loss = Loss(ndi1_2, pred))
rmse_104 <- unique(df_cv104$loss)
round(mean(rmse_104), 3)
round(sd(rmse_104), 1)
df_cv <- do.call("rbind", list_pred2)
df_cv52 <- df_cv %>%
filter(time_fct == 52)
df_cv104 <- df_cv %>%
filter(time_fct == 104)
# calculate rmse per time point
df_cv52 <- df_cv52 %>%
group_by(.folds) %>%
mutate(loss = Loss(ndi1_2, pred))
rmse_52_2 <- unique(df_cv52$loss)
round(mean(rmse_52_2), 3)
round(sd(rmse_52_2), 2)
df_cv104 <- df_cv104 %>%
group_by(.folds) %>%
mutate(loss = Loss(ndi1_2, pred))
rmse_104_2 <- unique(df_cv104$loss)
round(mean(rmse_104_2), 3)
round(sd(rmse_104_2), 2)
model_new <- nlme::lme(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + time_fct + LENGTH,
method = "REML",
random = ~1|id, data = df_pred)
xtable(summary(model_new))
library(xtable)
xtable(summary(model_new))
summary(model_new)
model_old <- nlme::lme(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + time_fct,
method = "ML",
random = ~1|id, data = df_pred)
summary(model_old)
model_old <- nlme::lme(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + time_fct,
method = "REML",
random = ~1|id, data = df_pred)
summary(model_old)
model_new <- nlme::lme(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + time_fct + LENGTH,
method = "REML",
random = ~1|id, data = df_pred)
summary(model_new)
model_new <- nlme::lme(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + time_fct + LENGTH,
method = "REML",
random = ~1|id, data = df_pred)
anova(model_old, model_new)
coef(summary(model_new))
xtable(coef(summary(model_new)))
df_pred$length_cnt <- df_pred$LENGTH - mean(df_pred$LENGTH)
model_new <- nlme::lme(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + time_fct + length_cnt,
method = "REML",
random = ~1|id, data = df_pred)
summary(model_new)
xtable(coef(summary(model_new)))
# Set-up
rm(list = ls())
set.seed(19950306)
library(lme4)
library(tidyverse)
library(leaps)
library(glmnet)
library(lmmlasso)
library(lmmen)
library(MASS)
library(groupdata2)
df_pred <- read.csv("Data/df_prediction_new_2020-03-23.csv")
# 10 obs are removed due to missingness
df_pred <- df_pred %>%
dplyr::select(id, id_revalue, ndi1_2, time_fct, ndi0_cnt, hads0_tot_cnt, LENGTH, WEIGHT) %>%
na.omit()
df_pred$weight_cnt <- df_pred$WEIGHT - mean(df_pred$WEIGHT)
# Add new column with folds numbers
K <- 5
# Add new column with folds numbers
K <- 5
df_pred <- fold(df_pred, k = K, id_col = "id_revalue") %>%
print(n=Inf)
# Create Loss function: Root Mean Squard Error
Loss <- function(x, y){
mse <- sum((x-y)^2)/length(x)
rmse <- sqrt(mse)
return(rmse)
}
loss <- numeric(K)
loss2 <- numeric(K)
list_pred <- c()
list_pred2 <- c()
for (k in 1:K){
training <- df_pred[df_pred$.folds !=k, ]
validation <- df_pred[df_pred$.folds ==k, ]
training.fit <-  lme4::lmer(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + weight_cnt + time_fct + (1|id),
data = training, REML = T)
training.fit2 <-  lme4::lmer(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + time_fct + (1|id),
data = training, REML = T)
validation.predict <- predict(training.fit, newdata=validation, type='response',
allow.new.levels = T)
validation.predict2 <- predict(training.fit2, newdata=validation, type='response',
allow.new.levels = T)
loss[k] <- Loss(validation$ndi1_2, validation.predict)
loss2[k] <- Loss(validation$ndi1_2, validation.predict2)
# Save predictions in list
list_pred[[k]] <- validation %>%
dplyr::select(id_revalue, id, ndi1_2, time_fct, .folds) %>%
mutate(pred = validation.predict)
list_pred2[[k]] <- validation %>%
dplyr::select(id_revalue, id, ndi1_2, time_fct, .folds) %>%
mutate(pred = validation.predict2)
}
# Show RMSE + SD
loss; loss2
RMSE  <- round(mean(loss), digits = 3); RMSE2  <- round(mean(loss2), digits = 3)
RMSE; RMSE2
round(sd(loss), digits = 1)
# 95 % CI of RMSE
RMSE_se <- sd(loss) / sqrt(100) # 100 unique ids
lower <- round(mean(loss) - 1.96 * RMSE_se, digits = 1)
upper  <- round(mean(loss) + 1.96 * RMSE_se, digits = 1)
c(lower, upper)
df_cv <- do.call("rbind", list_pred)
df_cv52 <- df_cv %>%
filter(time_fct == 52)
df_cv104 <- df_cv %>%
filter(time_fct == 104)
# calculate rmse per time point
df_cv52 <- df_cv52 %>%
group_by(.folds) %>%
mutate(loss = Loss(ndi1_2, pred))
rmse_52 <- unique(df_cv52$loss)
round(mean(rmse_52), 3)
round(sd(rmse_52), 1)
df_cv104 <- df_cv104 %>%
group_by(.folds) %>%
mutate(loss = Loss(ndi1_2, pred))
rmse_104 <- unique(df_cv104$loss)
round(mean(rmse_104), 3)
round(sd(rmse_104), 1)
model_old <- nlme::lme(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + time_fct,
method = "ML",
random = ~1|id, data = df_pred)
df_pred$length_cnt <- df_pred$LENGTH - mean(df_pred$LENGTH)
model_new <- nlme::lme(ndi1_2 ~ ndi0_cnt + hads0_tot_cnt + time_fct + length_cnt,
method = "ML",
random = ~1|id, data = df_pred)
anova(model_old, model_new)
